#!/bin/bash

##################################################
# Imports
##################################################

. ScriptFunctions
Import OptionParser
Import File
Import Terminal
Import GoboLinux
Import Array

##################################################
# Options and configuration
##################################################

Parse_Conf Compile.conf
Import Compile

helpOnNoArguments=yes
scriptDescription="Given a recipe, download the files required to compile it."
scriptUsage="<recipe>"
scriptExample="$compileRecipeDir/K3B/0.10/Recipe"
Add_Option_Entry   "s" "save-to" "Save the files to the given directory" "$compileArchivesDir"
Add_Option_Boolean "b" "batch" "Avoid asking questions."
Parse_Options "$@"

savedir=`Entry "save-to"`

if Is_Writable "$savedir" || [ "$compileDisableSudo" = "yes" ]
then sudo=
else sudo="sudo -u #0"
fi

if wget --help | grep -q no-check-certificate
then wget="wget --no-check-certificate"
else wget="wget"
fi

##################################################
# Fundamental variables
##################################################

scriptsversion=`Get_Version Scripts Current`
svnr=`echo $scriptsversion | sed 's/\([0-9]*\).*/\1/g'`
smajormiddle=`echo $scriptsversion | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/g'`
is_cvs=`echo $scriptsversion | grep -i CVS`
if [ ! "$is_cvs" ] && [ "$svnr" -gt 5 ] || \
   [ `GuessLatest $smajormiddle 2.1` != $smajormiddle -a ! "$is_cvs" ]
then
   Die "Your Scripts package is too old. Please update it by running 'InstallPackage Scripts'."
fi

recipe="$(Arg 1)"
[ "$recipe" ] || Die "Missing argument. Usage: $scriptName <recipe>. See --help."
. "$recipe"

##################################################
# Get sources
##################################################

if [ "$cvs" ]
then
   cd "$savedir"
   [ "$cvs_password" = "" ] && extra_info="( Just press enter )"
   echo "CVS PASSWORD is \"$cvs_password\"${extra_info}"

   login_method=`echo ${cvs} | cut -b-5`
   [ "$cvs_rsh" ] && export CVS_RSH=$cvs_rsh || export CVS_RSH=ssh
   [ "$login_method" != ":ext:" ] && cvs -d${cvs} login
   cvs -d${cvs} ${cvs_opts} ${cvs_options} co ${cvs_checkout_options} ${cvs_module}
   exit $?
elif [ "$svn" ]
then
   cd "$savedir"
   if [ "$svn_username" ] 
   then svn co $svn "${dir}" --username "$svn_username" --password "$svn_password"
   else svn co $svn "${dir}"
   fi
   exit $?
elif ! [ -n "$url${urls[*]}" ]
then
   Die "Missing URL in recipe '$recipe'."
fi

for var in url mirror_url file file_size file_md5
do
   eval '
      if [ -n "$'$var'" -a ! -n "${'$var's[*]}" ]
      then '$var's=("$'$var'")
      fi
   '
done

if ! [ "${files[*]}" ]
then files=(`Map basename "${urls[@]}"`)
fi

Quiet pushd "$savedir"
for i in `seq 0 $[${#urls[@]}-1]`
do
   file="${files[i]}"
   file_size="${file_sizes[i]}"
   file_md5="${file_md5s[i]}"
   if Exists "$file"
   then
      siz=`Get_Size "$file"`
      md5=`Get_MD5 "$file"`
      if [ -n "$file_size" ] && [ "$file_size" -eq "$siz" ]
      then
         if [ -z "$file_md5" ]
         then
            Log_Normal "Warning: no MD5 checksum in recipe."
            Log_Normal "Assuming "$file" is complete based only in size."
            continue
         elif [ "$file_md5" = "$md5" ]
         then
            Log_Verbose "$file is complete and matches MD5 checksum."
            continue
         else
            Log_Error "According to MD5 checksum in recipe, $file is corrupted."
            if Boolean "batch" || Ask "Remove and download again?"
            then rm "$file"
            else continue
            fi
         fi
      fi
   fi

   function wget_url() {
      fileindex=$1
      mirrorlevel=$2
      urlcount="${#urls[@]}"
      if [ "$mirrorlevel" = 0 ]
      then fetch="${urls[fileindex]}"
      else fetch="${mirror_urls[(mirrorlevel-1)*urlcount+fileindex]}"
      fi
      if [ -z "$fetch" ]
      then
         # Fail! No more mirrors!
         return 1
      fi
      local file="${files[fileindex]}"
      unset LANG LC_ALL # So that wget's output is not translated
      if [ -e "$file" ]
      then
         if Starts_With "http:" "$fetch"
         then
            expectedlength=`$sudo $wget --spider "$fetch" 2>&1 | grep "Length:" | tr -d ".," | cut -d" " -f2`
            locallength=`wc -c "$file" | cut -d" " -f1`
            if [ "$expectedlength" = "$locallength" ]
            then
               Log_Verbose "$file is already fully retrieved."
               return 0
            fi
         fi
      fi
      $sudo $wget -O "$file" -c --passive-ftp "$fetch" || {
         wget_url "$fileindex" "$[mirrorlevel+1]"
      }
   }

   wget_url "$i" 0 || {
      Die "Could not fetch '$url'."
   }
done
Quiet popd
