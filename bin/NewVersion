#!/bin/bash

source ScriptFunctions
Import File
Import Log
Import OptionParser
Import GoboLinux

### Options ###################################################################

scriptDescription="Update a recipe to a new version."
scriptCredits="Copyright (C) 2003, Hisham Muhammad - Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<package> <version> (url)"
scriptNotes="Optimistically, it assumes only the version number has changed, "\
"and the compilation process is still identical. The generated recipe is "\
"better understood as a 'template' for the new version recipe."
scriptExample='Allegro 4.1.12, NewVersion --source 0.9.7 Wine 0.9.14'

Add_Option_Entry "s" "source" "Recipe version number to use as a base for the new version" ""
Add_Option_Entry "n" "former-name" "App name of the Recipe to use as a base. Only necessary if it's different from the name of the new Recipe" ""
Parse_Options "$@"

Parse_Conf Compile.conf
Import Compile

unset packagename versionnumber

[ -w "$compileLocalRecipesDir" ] || Verify_Superuser

if [ -z "$(Arg 2)" ]
then
   Die "Please specify a package and version number. See --help."
fi

app="$(Arg 1)"
newversion="$(Arg 2)"
newurl="$(Arg 3)"

if Is_Entry "former-name"
then srcApp="`Entry "former-name"`"
else srcApp="$app"
fi

if Is_Entry "source"
then sourceVersion="`Entry "source"`"
else sourceVersion=''
fi

Log_Normal "Locating a recipe for $srcApp..."
rawrecipe=`FindPackage --type=recipe "$srcApp" "$sourceVersion"  2> /dev/null`
[ "$rawrecipe" ] || Die "Could not find a recipe for $srcApp"
Log_Normal "Found recipe for $srcApp at $rawrecipe"

bakedrecipedir=`GetRecipe $rawrecipe`
[ "$bakedrecipedir" ] || Die "Error getting recipe"
Log_Normal "Recipe placed in $bakedrecipedir"

[ -f "$bakedrecipedir/Recipe" ] || Die "$bakedrecipedir/Recipe not found"
oldrecipe=$bakedrecipedir/Recipe
. $oldrecipe

if Is_Entry "former-name"
then packagename="$app"
else packagename=`Get_Token "$bakedrecipedir" "/" "-2"`
fi

oldversionandrevision=`Get_Token "$bakedrecipedir" "/" "-1"`
oldversion=`String_Version "$oldversionandrevision"`

oldrecipedir="$bakedrecipedir"

if [ "$oldversion" = "$newversion" -a ! "$newurl" ] || [ "$newversion" = "$oldversionandrevision" -a ! "$newurl" ]
then
   Die "Current version is already $newversion."
elif [ "$cvs" -o "$svn" -o "$git" -o "$bzr" ]
then
   Die "NewVersion does not support upgrading cvs/svn/git/bzr recipes."
fi

Log_Normal "Creating recipe for $packagename $newversion based on $oldversionandrevision."

destinationDir="$compileLocalRecipesDir"
newrecipedir="$destinationDir/$packagename/$newversion"

mkdir -p "$destinationDir/$packagename"
cp -R "$oldrecipedir" "$newrecipedir"

cd "$newrecipedir" || Die "Failed creating new recipe dir."

[ -e "Recipe" ] || Die "Recipe file not found."

mv Recipe Recipe.old

if [ "$compileRecipeAuthor" != "" ]
then echo "# Recipe for version $newversion by $compileRecipeAuthor, on" `date` >> Recipe
else Log_Terse "Please fill up 'compileRecipeAuthor' variable at $goboSettings/Compile/Compile.conf"
fi

if [ "$newurl" ]
then
   # TODO: generalize mirror system
   newurl=`echo "$newurl" | sed 's,http://.*\.dl.sourceforge.net/sourceforge/,$httpSourceforge/,'`
   newurl=`echo "$newurl" | sed 's,ftp://ftp\.gnu\.org/gnu/,$ftpGnu/,'`

   . Recipe.old
   switchurls="s,$url,$newurl,g;"
   switchurls="${switchurls}s,^url=.*$,url=\"$newurl\",g;"
fi

# do not copy version-specific values
sed "s:$oldversion:$newversion:g;${switchurls}" Recipe.old |\
awk '
BEGIN { skip=0; }
/^file_md5s=\([^)]*$/ { skip=2; }
/^file_sizes=\([^)]*$/ { skip=2; }
/^file_md5s=\(.*\)$/ { skip=1; }
/^file_sizes=\(.*\)$/ { skip=1; }
/^file_md5=.*$/ { skip=1; }
/^file_size=.*$/ { skip=1; }
/^# Recipe for version/ { skip=1; }
/^\)$/ { skip--; }
{ if (skip<1) print; else if (skip==1) skip=0; }
' >> Recipe

rm Recipe.old

# convert old recipe type to new recipe type
# recipe type compileprogram is renamed to configure
sed -i 's/is_\(.*\)=yes/recipe_type=\1/
s/compileprogram/configure/' Recipe

Update_Recipe() {
   recipedir=$1
   arch=$2
   pushd $recipedir
   # Update version strings
   sed -i "s:$oldversion:$newversion:g;$leave_rows" Recipe

   source Recipe

   if [ "$newurl" ]
   then
      [ -z "$arch" ] && url="$newurl" || Log_Terse "Not updating $arch arch with passed URL. Please check."
   fi

   if Starts_With "http:" $url
   then
      Quiet pushd "$compileArchivesDir"
      Log_Normal "Checking URL '$url'..."
      quietflag="--quiet"
      Boolean "verbose" && unset quietflag
      if ! wget -t 5 $quietflag --spider "$url"
      then
         Log_Terse "URL may be invalid. Please check."
      fi
      Quiet popd
   fi

   if ls *.patch &> /dev/null
   then
      Log_Terse "This recipe contains $arch patches. Please check if they still apply."
   fi

   if [ "$url" ]
   then
      Log_Normal "Downloading source code..."
      if ! FetchArchive "$recipedir/Recipe"
      then
         rm -rf "$recipedir"
         Die "Could not download $arch source code, aborting."
      fi
      [ -z "${file}" ] && file="`basename $url`"
      filesize="`Get_Size $compileArchivesDir/$file`"
      filemd5="`Get_MD5 $compileArchivesDir/$file`"
      sed -i '/file_\(size\|md5\)/ d' "$recipedir/Recipe"
      sed -i "s,\(^url=.*\),\1\nfile_size=$filesize\nfile_md5=$filemd5,g" "$recipedir/Recipe"
   fi
   Quiet popd
}

Update_Recipe $newrecipedir ""
for arch in ${compileSupportedArchitectures[@]}
do
   if [ -f $newrecipedir/$arch/Recipe ]
   then
      Update_Recipe $newrecipedir/$arch $arch
   fi
done

Log_Normal "Recipe template for $packagename $newversion created"
Log_Normal "Printing result ($newrecipedir/Recipe):"
cat "$newrecipedir/Recipe"
for arch in $compileSupportedArchitectures
do
   if [ -f $newrecipedir/$arch/Recipe ]
   then
      Log_Normal "Printing recipe for $arch architecture:"
      cat "$newrecipedir/$arch/Recipe"
   fi
done
Log_Normal "Done"
