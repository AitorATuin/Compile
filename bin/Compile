#!/bin/bash

# Welcome back to Hacklandia.

##################################################
# Imports
##################################################

. ScriptFunctions
Import OptionParser
Import File
Import Terminal
Import GoboLinux
Import Array
Import Directories
Import PostInstall
Import Versions

##################################################
# Options and configuration
##################################################

helpOnNoArguments=yes
scriptDescription="Automated program compilation tool."
scriptCredits="(C)2003-2004 by Hisham Muhammad et al. Released under the GNU GPL."
scriptUsage="<program> [<version>]"
Add_Option_Entry "n" "app-name" "Override application name." ""
Add_Option_Entry "e" "version-number" "Override version number." ""
Add_Option_Entry "x" "cross-compile" "Cross-compile to another architecture." ""
Add_Option_Entry "c" "configure-options" "Options to be passed explicitly to './configure'." ""
Add_Option_Boolean "k" "keep" "Keep files if program directory already exists."
Add_Option_Boolean "b" "batch" "Batch mode: avoid asking questions."
Add_Option_Boolean "B" "no-build" "Do not build, just fetch the sources."
Add_Option_Boolean "I" "no-install" "Do not actually install the program."
Add_Option_Boolean "W" "no-web" "Do not check remote site for recipes, and bypass fetching of archives."
Add_Option_Boolean "S" "no-symlink" "Do not symlink."
Add_Option_Boolean "T" "no-strip" "Do not strip executables."
Add_Option_Boolean "G" "no-sign" "Do not sign program."
Add_Option_Boolean "U" "no-updatesettings" "Do not update settings for the program"
Add_Option_Boolean "M" "no-unmanaged" "Do not install unmanaged files."
Add_Option_Boolean "L" "lazy" "'Lazy mode': cut some corners when rebuilding; debugging aid: do NOT use it for building packages."
Add_Option_Entry   "A" "start-at" "Skip sub-recipes when building a meta-recipe: start include list at given recipe; effective only with --lazy; debugging aid: do NOT use it for building packages."
Add_Option_Boolean "D" "no-dependencies" "Do not try to fulfill dependencies."
Add_Option_Boolean "a" "remove-archive" "Remove archive(s) after a successful build"
Add_Option_Boolean "s" "remove-sources" "Remove sources after a successful build"

Parse_Conf Compile.conf
Parse_Options "$@"

[ "$compileFlags" ] && Parse_Options $compileFlags

Boolean "lazy" && Set_Boolean "no-web"
Boolean "no-web" && noweb="--no-web"
Boolean "batch" && batch="--batch"
Boolean "verbose" && verbose="--verbose"
Boolean "no-build" && Set_Boolean "keep"

if Is_Entry "configure-options"
then userconfigureoptions=(`Entry "configure-options"`)
else userconfigureoptions=()
fi

if Is_Writable "$goboExecutables" || [ "$compileDisableSudo" = "yes" ]
then sudo=
else sudo="sudo -u #0"
fi

make="${compileMakeCommand:-ColorMake}"
chown="${compileChownCommand:-chown}"

# Options to be propagated in sub-calls to Compile
unset compileoptions
Is_Entry cross-compile && compileoptions="$compileoptions --cross-compile `Entry cross-compile`"
Boolean no-build && compileoptions="$compileoptions --no-build"
Boolean no-web && compileoptions="$compileoptions --no-web"
Boolean batch && compileoptions="$compileoptions --batch"
Boolean lazy && compileoptions="$compileoptions --lazy"

### Temporary test for those tracking CVS ###
PrepareProgram --help | grep -q no-default-options || Die "Please update your Scripts snapshot."

trap undo_mounts TERM INT STOP HUP

#############################################

##################################################
# Helper functions
##################################################

Import Compile

# Doing more than symlinks here. Maybe 'do_install_and_symlink' would be a better name. --detsch
function do_symlink() {
   local nomake=no
   local forcelink=no
   local noextras=no
   while true
   do
      case "$1" in
      --no-make) nomake=yes ; shift ;;
      --no-extras) noextras=yes ; shift ;;
      --force-link) forcelink=yes ; shift ;;
      *) break ;;
      esac # it still is.
   done

   if ! [ "$nomake" = "yes" ]
   then
      [ "${unmanaged_files[*]}" ] &&
      for unmanaged in "${unmanaged_files[@]}"
      do
         unmanagedlist="${unmanaged}${unmanagedlist:+:$unmanagedlist}"
      done

      if [ "$goboIndex" ]
      then sandboxopts=()
      else sandboxopts=$(merge_array "sandbox_options")
      fi
      subdirs=$(echo "$odir" | tr '/' '\n' | wc -l)
      [ $subdirs -gt 1 ] && sandboxopts=("--expand-sandbox $[subdirs-1]" "${sandboxopts[@]}")
      SandboxInstall ${unmanagedlist:+--unmanaged-files "${unmanagedlist}"} ${sandboxopts[@]} --makefile $makefile --target "$install_target" "$1" "$2" -- "${installmerged[@]}" || wrap_fail "Installation step failed."
   fi

   if ! [ "$noextras" = "yes" ]
   then
      install_extras

      if [ "${unmanaged_files[*]}" ] 
      then
         rm -f -- $target/Resources/UnmanagedFiles
         for file in "${unmanaged_files[@]}"
         do echo $file >> $target/Resources/UnmanagedFiles
         done
      fi
   fi

   if ! Boolean "no-strip"
   then
      Log_Normal "Stripping executables..."
      [ "$STRIP" ] || STRIP=strip
      local d
      for d in bin sbin
      do
         Quiet pushd "$target/$d"
         for i in *
         do
            if file "$i" | grep -q -i "ELF .* executable"
            then Verbose $STRIP "$i"
            fi
         done
         Quiet popd
      done
   fi

   is_function_set pre_link && pre_link

   if Boolean "no-symlink" && [ "$forcelink" != "yes" ]
   then
      PrepareProgram --tree-cleanup $batch "$1" "$2"
   else
      unset updateoptions
      Boolean "batch" && updateoptions="--auto"
      if [ ! "$compileMetaRecipe" ] || [ "$compileMetaRecipe" -a "$update_each_settings" = "yes" ]
      then Boolean "no-updatesettings" || UpdateSettings $updateoptions "$1" "$2"
      fi
      [ "$needs_safe_linking" = "yes" ] && safeopts="--libraries safe --executables safe"
      [ "$batch" ] && unmanaged_opts="--unmanaged install"
      Boolean "no-unmanaged" && unmanaged_opts="--unmanaged skip"
      symlinkopts=$(merge_array "symlink_options")
      SymlinkProgram $safeopts $unmanaged_opts $symlinkopts "$1" "$2" || Die "Linking step failed."
      Run_PostInstall "$1" "$2" "" ""
   fi
}

function install_extras() {

   [ -d "$reciperesources" ] && $sudo cp -R "$reciperesources" "$installprefix"
   [ -d "$archreciperesources" ] && $sudo cp -R "$archreciperesources" "$installprefix"
   [ "$revision" ] && echo "$revision" > "$installprefix/Resources/Revision"

   if [ "$app" = "$appname" ]
   then
      CheckDependencies --mode=convert $app $version recipe $recipedir > "$installprefix/Resources/Dependencies"
   fi

   if [ "$app" ]
   then name=$app
   else name=$appname
   fi
   unixname=`echo $name | tr "[:upper:]" "[:lower:]"`-$version
   docdir="$installprefix/doc/$unixname"

   for d in "${dirs[@]}"
   do
      Quiet pushd "$d" && {
         for i in COPYING LICENSE README* NEWS AUTHORS BUGS TODO COPYRIGHT `[ "${docs[*]}" ] && eval echo "${docs[@]}"`
         do
            if [ -e "$d/$i" ]
            then
               $sudo mkdir -p "$docdir"
               $sudo cp -a "$d/$i" "$docdir"
            fi
         done
         Quiet popd
      }
   done
}

function wrapup() {
   if [ "$app" = "$appname" ]
   then
      # Add information inside binary package Resources directory
      Quiet mkdir -p $target/Resources

      if [ ! -z "$cross_uname_m" ]
      then echo "$cross_uname_m" > "$target/Resources/Architecture"
      else echo "`uname -m`" > "$target/Resources/Architecture"
      fi

      Log_Normal "Generating package's build information..."
      GenBuildInformation --store "$appname" "$versionnumber"

      if ! Boolean "no-sign"
      then
         if [ -e "$target/Resources/Dependencies" ]
         then
            Log_Normal "Generating package's signature..."
            SignProgram "$appname" "$versionnumber"
         else
            Log_Terse "Program does not have a Resources/Dependencies file."
            Log_Terse "Not signing it yet."
         fi
      fi
   fi
   # Some additional actions for LocalRecipes (adding info inside Resources, packing)
   if Starts_With "$compileLocalRecipesDir" "$reciperesources" && [ ! "$ROOTLESS_GOBOLINUX" = "1" ]
   then
      if [ "$app" = "$appname" ]
      then
         recipedeps="$reciperesources/Dependencies"
         Quiet mkdir -p "$reciperesources"

         cp "$target/Resources/BuildInformation" "$reciperesources/BuildInformation"

         if [ ! -f "$recipedeps" ]
         then
            cp "$target/Resources/BuildInformation" "$recipedeps"
            Log_Verbose $(cat "$recipedeps")
         fi
      fi
      Log_Normal "Packing recipe directory..."
      PackRecipe $noweb "$app" "$versionandrevision"
   fi
   cleanup
}

function undo_mounts() {
   if Is_Entry "cross-compile" && grep -q unionfs /proc/filesystems
   then Quiet umount $cross_libc_libdir $goboDevices $goboStatus
   fi
   [ "$1" = "--dont-exit" ] && return || exit 1
}

function wrap_fail() {
   # Rollback left-over stuff when compilation fails.
   if [ -e "$target" ]
   then
      PrepareProgram --tree-cleanup $batch "$appname" "$versionnumber"
      Quiet rmdir -p "$target"
      Quiet rmdir -p "$settings_target"
   fi
   undo_mounts "--dont-exit"
   Die "$1"
}

function cleanup() {
   if [ -d "$installprefix-Compile-old" ]
   then
      if Boolean "batch"
      then REPLY=y
      else Ask_Option "Remove $installprefix-Compile-old (backup from safe linking)? [y/N]"
      fi
      [ "$REPLY" = "y" -o "$REPLY" = "Y" ] && rm -rf "$installprefix-Compile-old"
   fi
   Boolean "remove-archive" && Map remove_archives "${files[@]}"
   Boolean "remove-sources" && Map remove_source_dir "${dirs[@]}"
   undo_mounts "--dont-exit"
   exit 0
}

function remove_archives() {
   rm -f "$1"
}

function remove_source_dir() {
   rm -rf "$1"
}

function check_direct_dependencies() {
   local fullversion="$2"
   if [ -d ${goboShared}/Compile/Recompile/${appname} -o -L ${goboShared}/Compile/Recompile/${appname} ]
   then
      for i in ${goboShared}/Compile/Recompile/${appname}/*
      do
         depapp=`basename $i`
         Boolean "batch" || Ask "${depapp} depends directly on ${appname}. Would you like to compile it?" || continue
         Compile $batch $lazy $noweb $depapp
      done
   fi
}

function combine_arrays() {
   merge="$1=("
   shift
   while [ "$1" ]
   do eval '[ -n "${'$1'[*]}" ] && merge=$merge'\'' "${'$1'[@]}" '\'
      shift
   done
   merge=$merge")"
   echo "$merge"
}

function in_host() {
   if [ "$goboCrossCompiling" = "yes" ]
   then
      unset goboCrossCompiling goboPrefix
      "$@"
      ret=$?
      export goboCrossCompiling=yes
      Parse_Conf Directories.conf
      return $ret
   else
      "$@"
   fi
}

function config_is_autoconf() {
   [ "$configure" ] || configure="./configure"
   grep -i "Generated .* autoconf" "$dir/$configure" &> /dev/null
}

function build_tree_if() {
   if [ "$@" ]
   then
      PrepareProgram --tree $batch $keep "$appname" "$versionnumber" || Die "Cannot build program tree."
   fi
}

function mark_export() {
   export variablestoexport="$variablestoexport $*"
}

function export_marked() {
   for var in $variablestoexport
   do
      export $var
   done
}

##################################################
# Prepare Environment
##################################################

Check_Dir_Variable compileDir
[ "${compileRecipeDirs[*]}" ] || Die "Array \$compileRecipeDirs is not set. Please update your Compile.conf."
for compileRecipeDir in "${compileRecipeDirs[@]}"
do
   Assert_Dir "$compileRecipeDir"
done
Check_Dir_Variable compileDependenciesDir
Check_Dir_Variable compileArchivesDir
Check_Dir_Variable compileSourcesDir
Check_Dir_Variable compilePackedRecipesDir

##################################################
# Checking Scripts package version
##################################################

scriptsversion=`Get_Version Scripts Current`
major=`echo $scriptsversion | sed 's/\([0-9]*\).*/\1/g'`
middle=`echo $scriptsversion | sed 's/^[0-9]*\.\([0-9]*\).*$/\1/g'`

if echo "$scriptsversion" | grep -q CVS || \
   echo "$scriptsversion" | grep -q GIT || \
   [ "`GuessLatest $scriptsversion 2.6.5`" = "$scriptsversion" ]
then
   # Version is valid, proceed.
   :
else
   Die "Your Scripts package is too old. Please update it by running 'InstallPackage Scripts'."
fi

##################################################
# Find and Get Recipe
##################################################

#unset directrecipe
# support for direct recipe passing
if [ -f "$(Arg 1)/Recipe" -o "`echo $(Arg 1) | grep "/"`" ] || Ends_With "--recipe.tar.bz2" "$(Arg 1)"
then
   #directrecipe=yes
   rawrecipes="$(Arg 1)"
   Log_Normal "Using passed recipe $rawrecipes"
else
   app="$(Arg 1)"
   versionandrevision="$(Arg 2)"
   version="`String_Version "$versionandrevision"`"

   # Find recipe:
   Log_Normal "Locating a recipe for $app $versionandrevision..."
   String_To_Array rawrecipes "`FindPackage $noweb --full-list --type=recipe "$app" "$versionandrevision" 2> /dev/null`"
   [ "${rawrecipes[*]}" ] || {
      FindPackage $noweb --type=recipe "$app" &> /dev/null && {
         Log_Terse "Could not find recipe for $app $versionandrevision."
         { Boolean "batch" || Ask_Continue "Attempt to create recipe for version $version?"
         } && NewVersion $app $version  && {
            String_To_Array rawrecipes "`FindPackage $noweb --full-list --type=recipe "$app" "$version" 2> /dev/null`"
         }
      }
   } || Die_With $errorNotFound "Could not find recipe for $app $versionandrevision"
   Log_Normal "Found recipe for $app $versionandrevision"
fi

bakedrecipedir=`in_host GetRecipe "${rawrecipes[@]}"`
[ "$bakedrecipedir" ] || Die "Error getting recipe"
Log_Normal "Recipe placed in $bakedrecipedir"

[ -f "$bakedrecipedir/Recipe" ] || Die "$bakedrecipedir/Recipe not found"
recipe=$bakedrecipedir/Recipe

##################################################
# Check if we are cross-compiling
##################################################

unset STRIP
Is_Entry "cross-compile" && export goboCrossCompiling=yes cross_compiling=yes

if [ "$goboCrossCompiling" = "yes" ]
then
   arch_conf=`Entry "cross-compile"`
   Log_Normal "Cross-Compiling for $arch_conf"

   crossConfFile=${goboPrograms}/Compile/Settings/Compile/Cross/Cross-$arch_conf.conf
   [ ! -f "$crossConfFile" ] && Die "Could not find $crossConfFile."

   source ${goboPrograms}/Compile/Settings/Compile/Cross/Cross-ResetEnv.conf
   source ${crossConfFile}
   source GoboPath
   Parse_Conf Directories.conf

   # Extra arguments to be passed to 'make' and 'make install'
   cross_make_variables=(
      "CC=$CC"
      "CPP=$CPP"
      "CXX=$CXX"
      "LIBTOOL=$LIBTOOL"
      "CROSS=$cross_compiler"
   )
   # ARCH is taken from the cross config file
   arch=`Get_Architecture $cross_uname_m`
   archsubdir=$bakedrecipedir/$arch
   archrecipe=$bakedrecipedir/$arch/Recipe
   compileSourcesDir="$compileDir/Sources-$arch_conf"
   mkdir -p $compileSourcesDir

   if grep -q unionfs /proc/filesystems
   then
       uniondirs="$cross_libc_libdir=rw"
       for i in $goboPrograms/*/Current
       do [ -d "$i/lib" ] && uniondirs="$uniondirs:$i/lib=ro"
       done
       mount -t unionfs none -o dirs=$uniondirs $cross_libc_libdir
   fi

   export CC HOSTCC LD
else
   cross_make_variables=""

   arch=`Get_Architecture`
   archsubdir=$bakedrecipedir/$arch
   archrecipe=$bakedrecipedir/$arch/Recipe
fi

##################################################
# Check dependencies
##################################################

app=`Get_Token "$bakedrecipedir" "/" "-2"`
versionandrevision=`Get_Token "$bakedrecipedir" "/" "-1"`

ncapp=`NamingConventions $app`
if [ "$ncapp" != "$app" ]
then Die "$app does not follow proper naming conventions. Recipe should be named $ncapp."
fi

recipedir="$bakedrecipedir"
reciperesources="$recipedir/Resources"
archreciperesources="$archsubdir/Resources"

if ! Boolean "no-dependencies" && ! Boolean "no-build"
then
   Log_Normal "Checking dependencies..."
   set -o pipefail
   selecteddeps=$(CheckDependencies --types=recipe --mode=missing \
     $noweb --quiet-progress  "$app" "$versionandrevision" \
     "recipe" "$recipedir" | awk '{ print $4 }' ) || Die "Aborted."
   set +o pipefail
   for d_url in ${selecteddeps}
   do
      Compile $compileoptions --no-dependencies $d_url || {
         ret=$?
         rm $selecteddeps
         exit $ret
      }
   done
fi

##################################################
# Dependency variables
##################################################

dependencies_file=$bakedrecipedir/Resources/Dependencies
if [ -f "$dependencies_file" ]
then
   for dep_name in `cat "$dependencies_file" | sed 's/^\ *//' | grep -v "^#" | awk '{ split($0,dep,/[\ <>=]*/); print dep[1] }'`
   do
      # GuessProgramCase prefers the name used by the given version,
      # but will give us any available if the version is not found.
      # I'm counting on this behavior here.
      guess_dep_name=`GuessProgramCase "$dep_name" 2> /dev/null`
      [ "$guess_dep_name" ] && dep_name="$guess_dep_name"
      lowercase_name=`echo $dep_name | tr '[:upper:]-+' '[:lower:]__'`
      dep_path=`Get_Dir runtime $dep_name Current`
      real_dep_path=`readlink -f "$dep_path"`
      if [ "$real_dep_path" ]
      then
         dep_path="$real_dep_path"
         [ -d "$dep_path" ] || dep_path=`Get_Dir runtime $dep_name $dep_vers`
         dep_vers=${dep_path##*/}
      else
         dep_vers=Current
      fi
      dep_settings_path=`Get_Dir runtimeSettings $dep_name $dep_vers`
      dep_variable_path=`Get_Dir runtimeVariable $dep_name $dep_vers`
      eval $lowercase_name'_path='$dep_path
      eval $lowercase_name'_settings_path='$dep_settings_path
      eval $lowercase_name'_variable_path='$dep_settings_path
      mark_export ${lowercase_name}_path ${lowercase_name}_settings_path ${lowercase_name}_variable_path
   done
fi

##################################################
# Set name and version (used in Meta-recipes)
##################################################

if Is_Entry "app-name"
then appname=`Entry "app-name"`
else appname="$app"
fi

revision="`String_Revision "$versionandrevision"`"
version="`String_Version "$versionandrevision"`"

if Is_Entry "version-number"
then versionnumber=`Entry "version-number"`
else versionnumber="$version"
fi

if [ "$versionnumber" = "CVS" -o "$versionnumber" = "cvs" ]
then versionnumber=`date +%Y%m%d`"-CVS"
fi

if [ "$versionnumber" = "SVN" -o "$versionnumber" = "svn" ]
then versionnumber=`date +%Y%m%d`"-SVN"
fi

target=`Get_Dir runtime $appname $versionnumber`
settings_target=`Get_Dir runtimeSettings $appname $versionnumber`
variable_target="${goboVariable}"
installprefix="$target"
mark_export target settings_target variable_target

if [ -d "$target" ] && ! Boolean "batch" && ! Boolean "keep" && ! Boolean "no-build"
then
   if ! Ask "$target already exists. Continue?"
   then exit 0
   fi
fi

##################################################
# Source recipe
##################################################

source "$recipe"
[ -e "$archrecipe" ] && source "$archrecipe"

if ! Boolean "no-build"
then
   if [ "$revision" ]
   then Log_Normal "Compiling $app version $version, revision $revision."
   else Log_Normal "Compiling $app version $version."
   fi
fi

# Backwards compability fix
[ "$is_compileprogram" = "yes" ] && recipe_type="configure"
[ "$is_makefile" = "yes" ] && recipe_type="makefile"
[ "$is_python" = "yes" ] && recipe_type="python"
[ "$is_perl" = "yes" ] && recipe_type="perl"
[ "$is_xmkmf" = "yes" ] && recipe_type="xmkmf"
[ "$is_meta" = "yes" ] && recipe_type="meta"
[ "$is_scons" = "yes" ] && recipe_type="scons"
[ "$is_manifest" = "yes" ] && recipe_type="manifest"

##################################################
# Set up enviroment
##################################################

if [ "${environment[*]}" ]
then
   for i in "${environment[@]}"
   do
      var=`echo $i | cut -d= -f 1`
      val=`echo $i | cut -d= -f 2-`
      eval export $var=\'$val\'
   done
fi

##################################################
# Check recipe's Compile version
##################################################

if [ -n "$compile_version" ]
then
   develrelease=`echo $compile_version | sed 's/\([0-9]*\).*/\1/g'`
   if [ "$compile_version" != "CVS" ] && [ "$develrelease" ] && [ "$develrelease" -gt "20000000" ]
   then
      compiledate=$(ls -l --time-style=+%Y%m%d $(which Compile) | awk '{print $6}')
      if [ "$compiledate" -lt "$develrelease" -a "$compilemm" != "CVS" ]
      then Boolean "batch" || Ask_Continue "Recipe was created with a development snapshot from $develrelease,\n"\
"which is more recent than the Compile version you have installed.\n"\
"Compilation may fail, upgrade ('InstallPackage Compile') is recommended."
      fi
   elif [ "$compile_version" != "$scriptVersion" ]
   then
      if echo $scriptVersion | grep -qi CVS
      then compilemm=CVS
      else compilemm=`echo $scriptVersion | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/g'`
      fi
      recipemm=`echo $compile_version | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/g'`
      if [ `GuessLatest $compilemm $recipemm` != $compilemm -a "$compilemm" != "CVS" ]
      then Boolean "batch" || Ask_Continue "Recipe was created with Compile $compile_version,\n"\
"which is more recent than the one you have installed.\n"\
"Compilation may fail, upgrade ('InstallPackage Compile') is recommended."
      fi
   fi
fi

##################################################
# Meta-recipe
##################################################

if [ "${include[*]}" ]
then
   started=no
   export compileMetaRecipe=1
   for item in "${include[@]}"
   do
      iname=`echo "$item" | sed 's/--.*//'`
      iversion=`echo "$item" | sed 's/.*--//'`
      if Is_Entry_Set "start-at"
      then
         if [ "`Downcase $iname`" = "`Downcase $(Entry start-at)`" ]
         then started=yes
         fi
         if [ "$started" = "no" ]
         then continue
         fi
      fi
      in_host $0 $compileoptions --keep --app-name "$appname" --version-number "$versionnumber" "$iname" "$iversion"
      if [ "$?" -gt 0 ]
      then
         Die "Compilation of $iname $iversion failed."
      fi
   done
fi

if [ "$recipe_type" = "meta" ]
then
   Boolean "no-build" && exit 0
   do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Installation failed."
   wrapup
fi

##################################################
# Construct some variable arrays
##################################################

if ! [ -n "${cvs}${svn}${url}${urls[*]}" ]
then Die "Missing URL, CVS or SVN in recipe '$recipe'."
fi

for var in url file file_size file_md5
do
   eval '
      if [ -n "$'$var'" -a ! -n "${'$var's[*]}" ]
      then '$var's=("$'$var'")
      fi
   '
done

if ! [ "${files[*]}" ]
then files=(`Map basename "${urls[@]}"`)
fi

if [ "${cvs}" -o "${svn}" ]
then
   if [ -z "${dir}" ]
   then
      dir="${appname}-${version}"
      save_directory="${dir}"
   else
      save_directory="${dir%%/*}"
   fi
fi

if [ "$dir" ]
then
   if [ ! -n "${dirs[*]}" ]
   then dirs=("$dir")
   fi
else
   if [ ! -n "${dirs[*]}" ]
   then
      remove_tar_extension() { echo "$1" | sed "s/\.t.*//" ;}
      String_To_Array dirs "`Map remove_tar_extension "${files[@]}"`"
   fi
fi

odirs=("${dirs[@]}")
odir=${dirs[0]}

make_basedir() { echo "$compileSourcesDir/"`echo "$1" | sed 's,/.*,,'` ;}
String_To_Array "basedirs" "`Map make_basedir "${dirs[@]}"`"

make_absolute() {
   if [ ${1:0:1} = "/" ]
   then echo "$1"
   else echo "$compileSourcesDir/$1"
   fi
}
String_To_Array dirs "`Map make_absolute "${dirs[@]}"`"
dir="${dirs[0]}"

##################################################
# Create the cross_make_variables array
##################################################
if [ "$goboCrossCompiling" = "yes" ]
then
   if [ "$recipe_type" = "configure" ] && config_is_autoconf
   then cross_array=configure_options
   else cross_array=compileMakeOptions
   fi
   eval `combine_arrays $cross_array $cross_array cross_make_variables`
fi

##################################################
# Get & Unpack sources
##################################################
savedir="--save-to $(echo ${dir}|sed s/"\(.*\)\/${save_directory}.*"/"\1"/) --save-directory ${save_directory}"
if [ "$cvs" ]
then
   # If sources were already fetched, do not patch again
   [ -d "${dir}" ] && skippatching=yes
   Boolean "no-web" || in_host FetchArchive $verbose $batch $savedir "$recipe" || Die "Error fetching CVS snapshot."
   Boolean "no-build" && exit 0
elif [ "$svn" ]
then
   [ "${dir}" -a -d "${dir}" ] && skippatching=yes
   Boolean "no-web" || in_host FetchArchive $verbose $batch $savedir "$recipe" || Die "Error fetching SVN snapshot."
   Boolean "no-build" && exit 0
else
   if ! Boolean "no-web"
   then
      in_host FetchArchive $verbose $batch "$recipe" || Die "Error fetching archive(s)."
   else
      Verify_Files "${files[*]}" "${file_sizes[*]}" "${file_md5s[*]}" || Die "Files are corrupted and new versions will not be fetched. Exiting."
   fi

   pfiles=`
      for i in "${files[@]}"
      do find "$compileArchivesDir" -name "$i"
      done
   `
   String_To_Array files "$pfiles"

   Boolean "no-build" && exit 0

   if [ "$uncompress" = "no" ]
   then
      [ "$dir" ] || dir=$appname
      [ "$unpack_files" ] || unpack_files=files_in_root
   fi

   unpack=yes
   if [ -d "${dirs[0]}" ]
   then
      if Boolean "lazy"
      then REPLY=u
      elif Boolean "batch"
      then REPLY=r
      else
         Log_Question "Directory '${basedirs[0]}' already exists."
         Ask_Option "What to do? [R]emove and reunpack/[B]ackup and reunpack/[U]se it/[C]ancel."
      fi
      case $REPLY in
      [Rr]) rm -rf "${basedirs[0]}" || $sudo rm -rf "${basedirs[0]}"
            if [ "$needs_build_directory" = "yes" ]
            then
               rm -rf "${basedirs[0]%/}-build" || $sudo rm -rf "${basedirs[0]%/}-build"
            fi ;;
      [Bb]) mv "${basedirs[0]}" "${basedirs[0]}.backup" ;;
      [Uu]) unpack=no ;;
      [Cc]) exit 0 ;;
      esac # esac is ridiculous.
   fi

   tempdir="$appname.$versionnumber.Compile.temp"
   [ "$unpack" = "yes" ] && \
   for ((i=0; i < ${#files[@]}; i++))
   do
      drop=.
      skipdir=
      if [ "$unpack_files" = "files_in_root" ]
      then
         drop="${dirs[0]}"
      elif [ "$unpack_files" = "inside_first" ]
      then
         if [ $i -gt 0 ]
         then
            drop="${dirs[0]}"
         fi
      elif [ "$unpack_files" = "contents_inside_first" ]
      then
         drop="${dirs[0]}"
         skipdir="${odirs[i]}"
      elif [ "$unpack_files" = "dirs" ]
      then
         if [ "$i" -eq 0 ]
         then
            drop=.
         else
            drop="${dirs[i]}"
            if [ ! "$keep_existing_target" ] && echo "$drop" | Quiet grep "$target"
            then keep_existing_target=yes
            fi
         fi
      fi

      if [ "$unpack_files" -o $i -eq 0 ]; then
         Quiet pushd "$compileSourcesDir"
         mkdir "${tempdir}"
      fi

      Log_Normal "Unpacking file ${files[i]}..."
      if [ "$uncompress" = "no" ]
      then Verbose cp -v "${files[i]}" "${tempdir}" || Die "Could not copy '${files[i]}'."
      else Verbose aunpack --extract-to="${tempdir}" -f "${files[i]}" || Die "Could not unpack '${files[i]}'."
      fi

      if [ "$unpack_files" -o $i -eq $(( ${#files[@]} - 1 )) ]; then
         mkdir -p "$drop"
         $chown -R --reference="${tempdir}" "${tempdir}"
         Quiet mv "${tempdir}"/"$skipdir"/* "${tempdir}"/"$skipdir"/.[A-z]* "$drop"
         rm -rf "${tempdir}"
         Quiet popd
      fi
   done
   if [ "$unpack" = "no" ]
   then skippatching=yes
   fi
fi # [ "$cvs" ]

cd "$dir" || Die "Directory $dir not found."

##################################################
# Apply patches
##################################################

# note: skippatching is not part of the public Compile API
if ! [ "$skippatching" = "yes" ]
then

   is_function_set pre_patch && pre_patch

   pushd "$compileSourcesDir/${odir%%/*}" &> /dev/null
   for i in `ls "$recipedir/"*.patch 2> /dev/null | sort` `ls "$archsubdir/"*.patch 2> /dev/null | sort`
   do
      Log_Normal "Applying patch $i..."
      patch -Np1 -i $i || Die "Failed on patch $i"
   done

   while read patch
   do
      Log_Verbose "Applying patch generated from ${patch}..."
      patch -Np1 < <(export_marked; ApplyVariables -i Compile "${patch}")
   done < <(find "$recipedir" -name "*.patch.in" | sort)

   popd &> /dev/null
fi

##################################################
# Gather common options from the recipe
##################################################

unset buildmerged
eval `combine_arrays buildmerged compileBuildOptions compileMakeOptions make_variables build_variables`
! [ "$install_target" ] && install_target="install"
unset installmerged
eval `combine_arrays installmerged compileInstallOptions compileMakeOptions make_variables install_variables`

if [ ! -z "$goboIndex" ]
then
   buildmerged=(`echo ${buildmerged[@]} | sed "s,$target,$goboIndex,g"`)
   installmerged=(`echo ${installmerged[@]} | sed "s,$target,$goboIndex,g"`)
fi

if [ "$makefile" = "" ]
then makefile=Makefile
fi

unset keep
if Boolean "keep" || [ "$keep_existing_target" = "yes" ]
then keep="--keep"
fi

##################################################
# Safe linking
##################################################

if [ -d "$installprefix" -a "$needs_safe_linking" = "yes" ]
then
   if [ -d "$installprefix-Compile-old" ]
   then Die "Backup version of this program already exists at $installprefix-Compile-old. Please check this."
   else
      cp -R "$installprefix" "$installprefix-Compile-old"
      do_symlink --force-link --no-make --no-extras "$appname" "$version-Compile-old"
   fi
fi

##################################################
# Compile!
##################################################

if [ "$recipe_type" = "configure" ]
then
   eval `combine_arrays config configure_options userconfigureoptions`
   [ "$configure" ] || configure="./configure"
   if [ "$needs_build_directory" = "yes" ]
   then
      builddir="${dir}-build"
      mkdir -p "$builddir"
      cd "$builddir"
      configure="${dir}/$configure"
      sandbox_options="--add-allowed ${dir} $sandbox_options"
   fi
   build_tree_if "$create_dirs_first" = "yes"
   is_function_set pre_build && pre_build
   if ! Boolean "lazy"
   then
      [ -f "$configure" ] && chmod +x "$configure"
      (
         for i in "${configure_variables[@]}"
         do
            var=`echo $i | cut -d= -f 1`
            val=`echo $i | cut -d= -f 2-`
            eval export $var=\'$val\'
         done
         [ "$autogen" ] || autogen="autogen.sh"
         [ -e "./$autogen" ] && autogen="./$autogen"
         [ "$autogen_before_configure" = "yes" ] && yes "" | $autogen
         prepareoptions=(
            --verbose
            --configure $configure
            `[ "$override_default_options" = "yes" ] && echo "--no-default-options"`
         )
         PrepareProgram $batch $keep ${prepareoptions[*]} "$appname" "$versionnumber" "--" "${config[@]}" || wrap_fail "Preparation step failed."
      ) || exit 1
   fi
   if ! [ "$do_build" = "no" ]
   then $make $build_target "${buildmerged[@]}" -f $makefile || wrap_fail "Build process failed."
   fi
   Boolean "no-install" && exit
   build_tree_if "$create_dirs_first" != "yes"
   is_function_set pre_install && pre_install
   if ! [ "$do_install" = "no" ]
   then do_symlink "$appname" "$versionnumber" || wrap_fail "Installation failed."
   else do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Installation failed."
   fi
   check_direct_dependencies
   is_function_set post_install && post_install
   wrapup
fi

##################################################

build_python_options() {
   # should exist in other modes too (eg, configure)
   if [ "$override_default_options" = "yes" ]
   then default_python_options=()
   else
      case "$1" in
      build)
         default_python_options=(
            "--build-base $target"
         )
         ;;
      build_ext)
         default_python_options=(
            "--build-lib $sitepackages"
         )
         ;;
      install)
         default_python_options=(
            "--prefix $target"
         )
         ;;
      esac
   fi
   eval `combine_arrays opts python_options default_python_options`
   if [ ! -z "$goboIndex" ]
   then opts=(`echo ${opts[@]} | sed "s,$target,$goboIndex,g"`)
   fi
}

if [ "$recipe_type" = "python" ]
then
   Quiet python -V || Die "This is a python type recipe and you don't seem to have python installed."
   [ "$PYTHONPATH" ] || Die "Environment variable PYTHONPATH is not set. Set it to something like '.:$goboLibraries/python2.3/site-packages'."
   build_tree_if "true"
   sitepackages="$target/lib/python${PYTHONPATH##*/python}"
   mkdir -p "$sitepackages"
   if [ ! "$build_script" ]
   then
      for i in setup.py configure.py build.py
      do [ -e "$i" ] && build_script="$i"
      done
   fi
   if ! [ "$do_build" = "no" ]
   then
      [ "$build_target" ] || build_target="build"
      build_python_options $build_target
      is_function_set pre_build && pre_build
      python $build_script $build_target ${opts[*]} || wrap_fail "Build failed."
   fi
   Boolean "no-install" && exit
   is_function_set pre_install && pre_install
   if ! [ "$do_install" = "no" ]
   then
      build_python_options $install_target
      subdirs=$(echo "$odir" | tr '/' '\n' | wc -l)
      if [ "$goboIndex" ]
      then sandboxopts=()
      else sandboxopts=$(merge_array "sandbox_options")
      fi
      [ $subdirs -gt 1 ] && sandboxopts=("--expand-sandbox $[subdirs-1]" "${sandboxopts[@]}")
      SandboxInstall ${sandboxopts[@]} -c python "$appname" "$versionnumber" -- $build_script $install_target ${opts[*]} || wrap_fail
   fi
   do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Installation failed."
   check_direct_dependencies
   is_function_set post_install && post_install
   wrapup
fi

##################################################

if [ "$recipe_type" = "perl" ]
then
   Quiet perl --version || Die "This is a perl type recipe and it seems like you don't have perl installed"
   [ "$PERL5LIB" ] || {
      export PERL5LIB="${goboLibraries}/perl5/site_perl/$(basename $(readlink -f ${goboPrograms}/Perl/Current))/"
   }

   # Quick hack: won't add these to the dependencies list because
   # that would be like adding GCC to all C-based packages.
   if [ "$appname" != "Perl-XML-Parser" -a "$appname" != "Perl-XML-Writer" ]
   then
      [ -e `Get_Dir runtime Perl-XML-Parser ''` ] || Die "You need Perl-XML-Parser and Perl-XML-Writer to build Perl modules."
      [ -e `Get_Dir runtime Perl-XML-Writer ''` ] || Die "You need Perl-XML-Parser and Perl-XML-Writer to build Perl modules."
   fi

   if [ "${without[*]}" ]
   then
      withoutopts=(`for w in "${without[@]}"; do echo --without-$w; done`)
   fi
   if [ -e ./Build.PL ]
   then
      build_tree_if "$create_dirs_first" = "yes"
      # New Build.PL system
      if ! [ "$do_build" = "no" ]
      then
         is_function_set pre_build && pre_build
         perl ./Build.PL
         ./Build --install_base $target $build_target || wrap_fail "Build failed."
      fi
      Boolean "no-install" && exit
      build_tree_if "$create_dirs_first" != "yes"
      is_function_set pre_install && pre_install
      if ! [ "$do_install" = "no" ]
      then
         ./Build --install_base $target $install_target || wrap_fail "Installation failed."
      fi
      if [ -d $target/script ]
      then
         Quiet pushd $target/bin
         Quiet ln -nfs ../script/* .
         Quiet popd
      fi
      Quiet pushd $target/lib
      Quiet mkdir -p perl5
      Quiet mv * perl5
      Quiet popd
      do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Linking failed."
      check_direct_dependencies
      is_function_set post_install && post_install
      wrapup
   else
      # Old Makefile.PL system
      perl Makefile.PL ${withoutopts[@]} ${perl_options[@]} prefix=$target
      recipe_type="makefile"
   fi
fi

##################################################

if [ "$recipe_type" = "xmkmf" ]
then
   is_function_set pre_build && pre_build
   xmkmf
   buildmerged=(
      "BINDIR=$target/bin"
      "LIBDIR=$target/lib"
      "LIBEXECDIR=$target/libexec"
      "INCDIR=$target/include"
      "IRULESRC=$goboLibraries/X11/config"
      "${buildmerged[@]}"
   )
   installmerged=(
      "BINDIR=$installprefix/bin"
      "LIBDIR=$installprefix/lib"
      "LIBEXECDIR=$installprefix/libexec"
      "INCDIR=$installprefix/include"
      "IRULESRC=$goboLibraries/X11/config"
      "${installmerged[@]}"
   )
   if [ ! -z "$goboIndex" ]
   then
      buildmerged=(`echo ${buildmerged[@]} | sed "s,$target,$goboIndex,g"`)
      installmerged=(`echo ${installmerged[@]} | sed "s,$target,$goboIndex,g"`)
   fi
   $make Makefiles "${buildmerged[@]}"
   recipe_type="makefile"
   unset pre_build # Little hack: we already ran it, so don't run it in is_makefile.
fi

##################################################

if [ "$recipe_type" = "makefile" ]
then
   build_tree_if "$create_dirs_first" = "yes"
   if ! [ "$do_build" = "no" ]
   then
      is_function_set pre_build && pre_build
      $make $build_target "${buildmerged[@]}" -f $makefile || wrap_fail "Build failed."
   fi
   Boolean "no-install" && exit
   build_tree_if "$create_dirs_first" != "yes"
   is_function_set pre_install && pre_install
   if ! [ "$do_install" = "no" ]
   then do_symlink "$appname" "$versionnumber" || Die "Installation failed."
   else do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Installation failed."
   fi
   check_direct_dependencies
   is_function_set post_install && post_install
   wrapup
fi

##################################################

if [ "$recipe_type" = "scons" ]
then
   Quiet scons --version || Die "This is a scons type recipe and you don't seem to have scons isntalled."
   [ "$scons" ] || scons="scons"
   if [ ! "$override_default_options" = "yes" ]
   then
      scons_variables=(
         "${scons_variables[@]}"
         "PREFIX=$target"
      )
   fi
   if [ ! -z "$goboIndex" ]
   then scons_variables=(`echo ${scons_variables[@]} | sed "s,$target,$goboIndex,g"`)
   fi
   build_tree_if "true"
   is_function_set pre_build && pre_build
   $scons "${scons_variables[@]}" "${build_variables[@]}" $build_target || wrap_fail "Build failed."
   Boolean "no-install" && exit
   is_function_set pre_install && pre_install
   if [ ! "$do_install" = "no" ]
   then
      $scons "${scons_variables[@]}" "${install_variables[@]}" $install_target || wrap_fail "Installation failed."
   fi
   do_symlink --no-make "$appname" "$versionnumber"
   check_direct_dependencies
   is_function_set post_install && post_install
   wrapup
fi

##################################################

# Manifest mode is experimental.

if [ "$recipe_type" = "manifest" ]
then
   build_tree_if "true"
   if is_function_set pre_install
   then pre_install || wrap_fail "pre_install failed."
   fi
   for i in "${manifest[@]}"
   do
      src=`echo $i | cut -d: -f1`
      dst=`echo $i | cut -d: -f2-`
      fulldst="$installprefix/$dst"
      mkdir -p $(dirname "$fulldst")
      if [ -d "$src" -a -d "$fulldst" ]
      then cp -R "$src"/* "$fulldst"
      else cp -R "$src" "$fulldst"
      fi
   done
   do_symlink --no-make "$appname" "$versionnumber" || wrap_fail "Installation failed."
   check_direct_dependencies
   is_function_set post_install && post_install
   wrapup
fi

##################################################

Die "Unsupported configuration in recipe '$recipe'."

