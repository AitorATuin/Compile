#!/bin/sh

##################################################
# Imports
##################################################

. ScriptFunctions
Import OptionParser
Import File
Import GoboLinux

##################################################
# Options and configuration
##################################################

scriptDescription='Pack a recipe for inclusion in the recipe tree.'
scriptCredits="(C) 2006 Hisham Muhammad. Released under the GNU GPL."
scriptNotes="This script will take a recipe in and "\
"pack it as Foo--1.0-r1--recipe.tar.bz2 at $genRecipeStoreDir."
scriptUsage="<name> [<version>]"
Add_Option_Boolean "t" "tag" "Tag a recipe revision (requires CVS write access)"
Add_Option_Boolean "c" "cleanup" "Cleanup local CVS copy when tagging"
Parse_Options "$@"

Parse_Conf Compile.conf

# need to parse cvs error messages to find missing files...
unset LANG LC_ALL

##################################################

function files_in_recipepath() {
   find "$recipepath" -not -path "*/CVS/*" -and -not -path "*/CVS"
}

function dirs_in_recipepath() {
   find "$recipepath" -not -path "*/CVS/*" -and -not -path "*/CVS" -and -type d
}

function tag_revision() {
   Log_Normal "Tagging revision $reciperevision for $fullname."
   if Is_Writable "$reciperevisionfile"
   then echo "$reciperevision" > "$reciperevisionfile"
   else sudo $SHELL -c "echo '$reciperevision' > '$reciperevisionfile'"
   fi
}

function sudo_if_needed_for() {
   file="$1"
   shift
   if Is_Writable "$file"
   then "$@"
   else sudo "$@"
   fi
}

function require_cvs() {
   [ -e "CVS/Root" ] || Die "$directory is not a working copy of a CVS repository."
}

function cvs_files() {
   cvs "$@" `files_in_recipepath` || Die "Failed running 'cvs $@'"
}

function cvs_commit () {
   cvs commit -m "$*" "$recipepath" || Die "Failed running 'cvs commit'"
}

function cvs_add() {
   cvs add "$@" $(dirname "$recipepath") `files_in_recipepath` || Die "Failed running 'cvs add $@'"
}

function cvs_refresh_local_copy() {
   find "$recipepath" -path "*/CVS/Root" | while read rootfile
   do
      dir=`dirname "$rootfile"`
      rm -- "$dir"/*
      rmdir "$dir"
   done
   upper=`dirname "$recipepath"`
   if [ ! -e "$upper"/CVS/Root ]
   then start="$upper"
   else start="$recipepath"
   fi
   tempstart="$start~PackRecipe~"
   mv "$start" "$tempstart"
   cvs update -dP "$start"
   find "$tempstart" -mindepth 1 | while read file
   do
      base="${file#$tempstart/}"
      if [ -d "$file" ]
      then mkdir -p "$start/$base"
      else mv "$file" "$start/$base"
      fi
   done
   find "$tempstart" -type d | xargs rmdir -p 2> /dev/null
}

function paint_diff() {
   mtail --quiet --config=`Find_Conf diff.mtailrc`
}

function cvs_confirm_diff() {

   function scan_added_and_deleted() {
      local dir="$1"
      local entries="CVS/Entries"
      if [ -e "$entries" ]
      then
         ls | grep -v "^CVS$" | while read file
         do
            if ! grep -q "^[^/]*/$file/" "$entries"
            then echo "$dir/$file" >> "$cvsadded"
            fi
            if [ -d "$file" ]
            then
               cd "$file"
               scan_added_and_deleted "$dir/$file"
               cd ..
            fi
         done
         cat "$entries" | grep "/" | while read line
         do
            file=`echo "$line" | sed 's,[^/]*/\([^/]*\)/.*,\1,'`
            ! [ -e "$file" ] && echo "$dir/$file" >> "$cvsdeleted"
         done
      else
         ls | grep -v "^CVS$" | while read file
         do
            echo "$dir/$file" >> "$cvsadded"
            if [ -d "$file" ]
            then
               cd "$file"
               scan_added_and_deleted "$dir/$file"
               cd ..
            fi
         done
      fi
   }

   function for_each() {
      local list="$1"
      local msg="$2"
      shift 2
      cat "$list" | while read file
      do
         [ "$msg" ] && Log_Normal "$msg: $file"
         "$@" "$file"
      done
   }

   function show_diff() {
      unset old new
      [ "$1" = "old" ] && old=___ || new=___
      shift
      [ -f "$1" ] || return
      { 
         echo "diff $1"
         diff -Nar $new "$1" $old | tail -n +1
      } | paint_diff
   }
   
   function add_file() {
      cvs add "$1"
      cvs commit -m "Adding new file in $fullname." "$1"
   }

   function remove_local_file() {
      rm -rf -- "$1"
   }

   function remove_file() {
      cvs remove -f "$1"
      cvs commit -m "Adding new file in $fullname." "$1"
   }

   cvsdiff=`mktemp`
   cvs diff --brief "$recipepath" &> "$cvsdiff"
   diffstatus=$?
   
   cvsadded=`mktemp`
   cvsdeleted=`mktemp`

   cd "$recipepath"
   scan_added_and_deleted "$recipepath"
   cd ../..

   # Bring back removed files to show diff.   
   cvs update -dP "$recipepath" 2> /dev/null
   
   if [ "$diffstatus" -ne 0 -o -s "$cvsadded" -o -s "$cvsdeleted" ]
   then
      cat "$cvsdiff" | paint_diff
      for_each "$cvsadded" "New file" show_diff new
      for_each "$cvsdeleted" "Deleted file" show_diff old
      if ! Ask "Confirm these changes and create revision $reciperevision?"
      then
         for_each "$cvsdeleted" "" remove_local_file
         [ -s "$cvsdeleted" ] && cvs update -dP
         rm -f -- "$cvsdiff" "$cvsadded" "$cvsdeleted"
         exit 0
      fi
      for_each "$cvsadded" "New file" add_file
      for_each "$cvsdeleted" "Deleted file" remove_file
      [ -s "$cvsdeleted" ] && cvs update -dP
      rm -f -- "$cvsdiff" "$cvsadded" "$cvsdeleted"
   else
      rm -f -- "$cvsdiff" "$cvsadded" "$cvsdeleted"
      Die "Will not make a revision if there are no changes."
   fi
}

##################################################

unset confirm
if [ -d "$(Arg 1)" -a -e "$(Arg 1)/Recipe" ]
then
   recipedir=`readlink -f "$(Arg 1)"`
else
   if [ "$(Arg 2)" ]
   then
      fullname="$(Arg 1) $(Arg 2)"
   else
      fullname="$(Arg 1)"
      confirm=yes
   fi
   
   recipedir=`FindPackage --no-web --type=recipe $fullname | head -n 1`
   [ "$recipedir" ] || Die "Recipe for $fullname not found in local repositories."
fi

# e.g. /Files/Compile/LocalRecipes/
directory=`echo $recipedir | sed 's%\(.*\)/\([^/]*/[^/]*\)*%\1%'`
# e.g. Portmap/5beta
recipepath=`echo $recipedir | sed 's%\(.*\)/\([^/]*/[^/]*\)*%\2%'`

fullname=${recipepath//\// }

if [ "$confirm" ]
then
   Ask_Continue "Creating recipe file for $fullname."
fi

cd $directory

reciperevisionfile="$recipepath/Resources/RecipeRevision"

if [ -e "$reciperevisionfile" ]
then
   reciperevision=`cat "$reciperevisionfile"`
   [ "${reciperevision:0:1}" = "r" ] || Die "Invalid recipe revision format '$reciperevision' in $directory/$reciperevisionfile"
fi

if Boolean "cleanup"
then
   require_cvs
   cvs_refresh_local_copy
   if ! Boolean "tag"
   then exit 0
   fi
fi

if Boolean "tag"
then
   require_cvs
   
   if [ -e "$recipepath/CVS/Root" ]
   then
      reciperevision=`cat "$reciperevisionfile"`
      if [ "$reciperevision" = "rLOCAL" ]
      then
         Ask_Continue "Warning: recipe seems to be in CVS without a proper revision number (must never happen!). Assume r1?"
         reciperevision="r1"
      else
         revisionnumber=$[${reciperevision#r}+1]
         reciperevision="r$revisionnumber"
      fi
      cvs_confirm_diff
      tag_revision
   else
      Log_Normal "Recipe is not yet in CVS."
      if [ "$reciperevision" -a "$reciperevision" != "rLOCAL" ]
      then Ask_Continue "Warning: recipe is not in CVS but has non-LOCAL tag (must never happen!). Assume r1?"
      fi
      reciperevision="r1"
      tag_revision
      cvs_add
      cvs_commit "Adding $fullname."
   fi
   cvs_files tag "$reciperevision"
   cvs_commit "$fullname revision $reciperevision."
fi

if ! [ -e "$reciperevisionfile" ]
then
   reciperevision="rLOCAL"
   tag_revision
fi

nameversion=${fullname// /--}

packedpath="$genRecipeStoreDir/$nameversion-$reciperevision--recipe.tar.bz2"

if [ -e "$packedpath" ]
then
   # Force a 'y' here.
   if ! Ask "$packedpath exists. Overwrite?"
   then exit 1
   fi
fi

sudo_if_needed_for "$genRecipeStoreDir" \
   mkdir -p "$genRecipeStoreDir"

sudo_if_needed_for "$packedpath" \
   tar cjf "$packedpath" --no-recursion `files_in_recipepath` || Die "Failed packing recipe in $packedpath"

sudo_if_needed_for "$packedpath" \
   touch "$packedpath" --reference="$recipepath/Recipe"

Log_Normal "Recipe packed in $packedpath"

