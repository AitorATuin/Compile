#!/bin/sh

if [ "$1" = "--help" ]
then
   echo "$0 [<start_stage> [<end_stage>]]"
   echo "   where stage can be: rolayer, squashfs, initrd, iso"
   echo " "
   echo "   for more information, see http://gobolinux.org/?page=livecd"
   echo " "
   exit 0
fi

# Stages:
STAGE_ROLAYER=0; STAGE_SQUASHFS=1; STAGE_INITRD=2; STAGE_ISO=3

if [ "$1" ]
then
   case "$1" in
   "rolayer")  start_at=$STAGE_ROLAYER;;
   "squashfs") start_at=$STAGE_SQUASHFS;;
   "initrd")   start_at=$STAGE_INITRD;;
   "iso")      start_at=$STAGE_ISO;;
   esac
else
   start_at=$STAGE_ROLAYER
   #[ -d "Output/ROLayer" ] && start_at=$STAGE_SQUASHFS || 
fi
 
if [ "$2" ]
then
   case $2 in
   "rolayer")  stop_at=$STAGE_ROLAYER;;
   "squashfs") stop_at=$STAGE_SQUASHFS;;
   "initrd")   stop_at=$STAGE_INITRD;;
   "iso")      stop_at=$STAGE_ISO;;
   esac
else
   stop_at=$STAGE_ISO
fi

if [ "$UID" != "0" ]
then
    echo "Running as superuser."
    exec sudo -u "#0" $0 $*
fi


root=$PWD
kernel_version=`sed -n 's,.*--\(.*\)--kernel.*,\1,p' /Programs/BuildLiveCD/Current/Data/Packages-Devel-i686`
arch=i686
today=`date +%Y%m%d`
localcvs=$root/LocalCVS
packages=$root/Archives/Packages
datadir="/Programs/BuildLiveCD/Current/Data" 
   
#############################################################################
# ROLayer
#############################################################################
if [ "$start_at" -le "$STAGE_ROLAYER" ] && [ "$stop_at" -ge "$STAGE_ROLAYER" ]
then
   echo "=> ROLayer stage started"

   if ! [ -e LocalCVS -a -e Archives/Packages -a -e Archives/Ext ]
   then
      echo 'Basic directories could not be found.'
      echo 'Please check if you are running the script inside a directory populated by UpdateEnviromnent'
      exit 1
   fi

   tools=`cat $datadir/Packages-List-GoboLinuxTools`

   toolswhichneedmake=""
   cd "$packages"
   for package in $tools 
   do
      tarball=$package--$today--$arch.tar.bz2

      if [ ! -e "$tarball" -o "`find "$localcvs/tools/$package/" -newer "$tarball" 2> /dev/null`" ] 
      then
         echo "Packing $package CVS snapshot..."
         rm -rf $package                    # only required if there are leftovers from a previous execution
         mkdir -p $package
         cp -a $localcvs/tools/$package $package/$today
         # we need to build here in order to create the files which are going to be linked inside BuildRoot
         [ -e $package/$today/Makefile ] && echo Building $package/$today && make -C $package/$today > /dev/null 
         find $package/$today/ -type d -name CVS | xargs rm -rf 
         rm -f $package--*--$arch.tar.bz2   # cleaning up old versions too
         tar cjpf $tarball $package/$today  # create the package
         rm -rf $package
         toolswhichneedmake="$toolswhichneedmake $package"
      else
         echo "Don't repacking $package CVS snapshot..."
      fi

   done

   echo
   echo "Building root..."
   cd "$root"
   BuildRoot "Output/ROLayer" "Archives/Packages" $datadir/Packages-List-* || exit 1
   
   echo
   cd "$root"
   for package in $tools 
   do
      # we build the tools again to ensure they are prepared to the LiveCD environment
      if [ -e Output/ROLayer/Programs/$package/$today/Makefile ] && echo "$toolswhichneedmake" | grep "$package" &> /dev/null 
      then 
         echo "Rebuilding $package..." 
         chroot Output/ROLayer make -C Programs/$package/$today/ clean  
         chroot Output/ROLayer make -C Programs/$package/$today/        
      fi
   done

   echo "Coping /Files from LocalCVS..."
   # Add few items to rolayer
   for directory in Documentation Descriptions Wallpapers
   do
      if ! diff --recursive --exclude=CVS "LocalCVS/files/$directory" "Output/ROLayer/Files/$directory" &> /dev/null
      then
         echo "Updating Files/$directory"
         rm -rf "Output/ROLayer/Files/$directory"
         cp -a "LocalCVS/files/$directory" "Output/ROLayer/Files"
      else
         echo "Keeping Files/$directory"
      fi
   done

   # /Files/Fonts
   ffontsmd5=`md5sum Archives/Ext/Files-Fonts.tar.bz2`
   if [ -d "Output/ROLayer/Files/Fonts" ]
   then
      ffontsmd5old=`cat Output/Checksums/Files-Fonts`
   fi
   if [ "$ffontsmd5" = "$ffontsmd5old" ]
   then
      echo "Keeping /Files/Fonts..."
   else
      echo "Unpacking /Files/Fonts..."
      tar xfj Archives/Ext/Files-Fonts.tar.bz2 --overwrite -C Output/ROLayer/Files
      echo "$ffontsmd5" > Output/Checksums/Files-Fonts
   fi

   # /System/Kernel/{Modules,Boot}
   kernelmd5=`md5sum Archives/Ext/Linux--$kernel_version--kernel-i686.tar.bz2`
   if [ -d "Output/ROLayer/System/Kernel/Modules" -a -d "Output/ROLayer/System/Kernel/Boot" ]
   then
      kernelmd5old=`cat Output/Checksums/Kernel 2> /dev/null`
   fi
   if [ "$kernelmd5" = "$kernelmd5old" ]
   then
      echo "Keeping kernel files..."
   else
      echo "Unpacking kernel files..."
      rm -rf Output/ROLayer/System/Kernel/{Modules,Boot}
      tar xfj Archives/Ext/Linux--$kernel_version--kernel-i686.tar.bz2 --overwrite -C Output/ROLayer
      echo "$kernelmd5" > Output/Checksums/Kernel
   fi

   # Clean CVS files from ROLayer
   echo "Removing CVS files..."
   find Output/ROLayer/Files -type d -name CVS | xargs rm -rf

   echo "=> ROLayer stage done"
fi

#############################################################################
# Squashfs
#############################################################################
if [ "$start_at" -le "$STAGE_SQUASHFS" ] && [ "$stop_at" -ge "$STAGE_SQUASHFS" ]
then
   echo "=> SquashFS stage started"
   if ! which mksquashfs &> /dev/null
   then
      echo "You need to install SquashFS-Tools."
      exit 1
   fi

   build_layers=(
      "Output/RWLayer=ro"
      "Output/ROLayer=ro"
   )
   unionfs_dirs=`echo "${build_layers[@]}" | tr " " ":"`
   mkdir -p Output/Environment
   mkdir -p Output/RWLayer
   echo "Unionfs mounting layers."
   tmp_mp=`mktemp -d /tmp/finalize_layer-XXXXX`
   unionfs_dirs="dirs=${tmp_mp}=rw:${unionfs_dirs}"
   #echo mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment
   mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment || { echo Error mounting Output/Environment; exit 1; }

   mkdir -p Output/Checksums
   
   function ld_so_cache_changed() {
      if grep -q "Output/Environment/Programs/Glibc/Settings/ld.so.cache" /tmp/newer.txt
      then
         diff Output/ld.so.cache.sum Output/ld.so.cache.sum.old &> /dev/null
         if [ $? -ne 0 ]
         then
            cp Output/ld.so.cache.sum Output/ld.so.cache.sum.old
            return 0
         fi
      fi
      return 1
   }

   function mksquashfs_on_demand() {
      out="$1"
      shift
      bn=`basename "$out"`
      # sumsfile=Output/Checksums/$bn.sums
      echo "Checking if $bn needs updating..."
      find "$@" -newer "$out" 2> /dev/null > /tmp/newer.txt
      #diffs=`cat /tmp/newer.txt | grep -v "Output/Environment/Programs/Glibc/Settings/ld.so.cache" | wc -l`
      #FIXME: Assuming Glibc is not being changed
      diffs=`cat /tmp/newer.txt | grep -v "Output/Environment/Programs/Glibc" | wc -l`
      ld_so_cache_changed
      if [ $diffs -ne 0 ]
      then
         echo ==========
         echo Changes:
         echo ----------
         cat /tmp/newer.txt
         echo ==========
      fi
      if [ ! -e "$out" ] || [ $diffs -gt 0 ] || ld_so_cache_changed
      #find "$@" | grep -v Devices | xargs -n 100 md5sum > $sumsfile.new 2> /dev/null
      #if ! diff -q $sumsfile $sumsfile.new
      then
         echo "Creating squashfs compressed file $bn..."
         # mv $sumsfile.new $sumsfile
         nice -20 mksquashfs "$@" "$out" -noappend -keep-as-directory
      else
         echo "Mksquashfs not needed for $bn."
      fi
      rm /tmp/newer.txt
   }

   # Final actions on Environment
   chroot Output/Environment /bin/ldconfig
   md5sum Output/Environment/Programs/Glibc/Settings/ld.so.cache > Output/ld.so.cache.sum

   # compress the uncompressed files into squashfs files
   mkdir -p Output/ISO
   time mksquashfs_on_demand Output/ISO/GoboLinux-files.squashfs Output/Environment/Files
   for i in $datadir/Packages-List-*; do 
      time mksquashfs_on_demand Output/ISO/`basename $i`.squashfs `cat $i | cut -f 1 -d ' ' | sort -u | while read i; do echo Output/Environment/Programs/$i; done`
   done
   time mksquashfs_on_demand Output/ISO/GoboLinux-rest.squashfs `ls -d Output/Environment/* | grep -v Files | grep -v Programs | grep -v Users`

   umount Output/Environment
   rmdir Output/Environment
   rm -rf $tmp_mp
   echo "=> SquashFS stage done"
fi

#############################################################################
# InitRD
#############################################################################
if [ "$start_at" -le "$STAGE_INITRD" ] && [ "$stop_at" -ge "$STAGE_INITRD" ]
then
   echo "=> InitRD stage started"

   if ! [ -e Archives/InitRD ]
   then
      echo 'Basic directory Archives/InitRD could not be found.'
      echo 'Please check if you are running the script inside a directory populated by UpdateEnviromnent'
      exit 1
   fi

   mkdir -p Output/ISO
   echo "Unpacking CD-Bootloader..."
   tar  xfj Archives/Ext/CD-Bootloader-$arch.tar.bz2 --overwrite -C Output/ISO/

   #Rebuild initrd
   initrd_dir=Output/InitRD

   cd Archives/InitRD/
   for package in InitRDScripts
   do
      echo "Packing $package CVS snapshot..."
      tarball=$package--$today--$arch.tar.bz2
      rm -rf $package
      rm $package--*
      mkdir -p $package/$today
      cp -a $localcvs/tools/$package/* $package/$today
      cd $package/$today
      [ -e Makefile ] && make > /dev/null
      find -type d -name CVS | xargs rm -rf 
      cd ..
      ln -nfs $today Current
      cd ..
      rm -f $tarball
      tar cjpf $tarball $package
      rm -rf $package
   done
   cd $root

   MakeInitRDTree
   echo "Extracting isolinux/kernel from Archives/Ext/Linux--${kernel_version}--kernel-i686.tar.bz2"
   tar xfj Archives/Ext/Linux--${kernel_version}--kernel-i686.tar.bz2  System/Kernel/Boot/kernel-${kernel_version} -O > Output/ISO/isolinux/kernel
   mkfs.cramfs $initrd_dir Output/ISO/isolinux/initrd
   echo "=> InitRD stage done"
fi

#############################################################################
# ISO
#############################################################################
if [ "$start_at" -le "$STAGE_ISO" ] && [ "$stop_at" -ge "$STAGE_ISO" ]
then
   echo "=> ISO stage started"
   iso_name="Output/GoboLinux-NoVersion.iso"
   time nice -20 mkisofs -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table Output/ISO  > $iso_name
   echo "=> ISO stage done"
fi
