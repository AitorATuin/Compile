#!/bin/sh

kernel_version=`sed -n 's,.*--\(.*\)--kernel.*,\1,p' /Programs/BuildLiveCD/Current/Data/Packages-Devel-i686`

if [ "$1" = "--help" ]
then
   echo "$0 [<start_stage> [<end_stage>]]"
   echo "   where stage can be: rolayer, squashfs, initrd, iso"
   echo " "
   echo "   for more information, see http://gobolinux.org/?page=livecd"
   echo " "
   exit 0
fi

# Stages:
STAGE_ROLAYER=0; STAGE_SQUASHFS=1; STAGE_INITRD=2; STAGE_ISO=3

if [ "$1" ]
then
   case "$1" in
   "rolayer")  start_at=$STAGE_ROLAYER;;
   "squashfs") start_at=$STAGE_SQUASHFS;;
   "initrd")   start_at=$STAGE_INITRD;;
   "iso")      start_at=$STAGE_ISO;;
   esac
else
   [ -d "Output/ROLayer" ] && start_at=$STAGE_SQUASHFS || start_at=$STAGE_ROLAYER
fi
 
if [ "$2" ]
then
   case $2 in
   "rolayer")  stop_at=$STAGE_ROLAYER;;
   "squashfs") stop_at=$STAGE_SQUASHFS;;
   "initrd")   stop_at=$STAGE_INITRD;;
   "iso")      stop_at=$STAGE_ISO;;
   esac
else
   stop_at=$STAGE_ISO
fi

if ! which mksquashfs &> /dev/null
then
   echo "You need to install SquashFS-Tools."
   exit 1
fi

for conf in ./Master.conf /System/Settings/BuildLiveCD/Master.conf fail
do
   if [ "$conf" = "fail" ]
   then
      echo "Could not find Master.conf."
      exit 1
   elif [ -e $conf ]
   then
      source $conf
      break
   fi
done

if [ "$UID" != "0" ]
then
    echo "Running as superuser."
    exec sudo -u "#0" $0 $*
fi

tools=( AbsTK BootScripts Compile ConfigTools GoboHide Installer Listener LiveCD Manager Scripts )
today=`date +%Y%m%d`
arch=`uname -m`

root=$PWD
localcvs=$PWD/LocalCVS/
packages=$PWD/Archives/Packages
externalarchives=$PWD/Archives/Ext
external=$PWD/External

if ! [ -e $localcvs -a -e $packages -a -e $external ] 
then
   echo 'Basic directories could not be found.'
   echo 'Please check if you are running the script inside a directory populated by UpdateEnviromnent'
   exit 1
fi 

if [ "$start_at" -le "$STAGE_ROLAYER" ] && [ "$stop_at" -ge "$STAGE_ROLAYER" ]
then
   echo "=> ROLayer stage started"
   
   cd $packages
   for package in ${tools[@]} 
   do
      echo "Packing $package CVS snapshot..."
      tarball=$package--$today--$arch.tar.bz2
      rm -rf $package
      mkdir -p $package/$today
      cp -a $localcvs/tools/$package/* $package/$today
      cd $package/$today
      [ -e Makefile ] && make > /dev/null
      find -type d -name CVS | xargs rm -rf 
      cd ..
      ln -nfs $today Current
      cd ..
   
      rm -f $tarball
      tar cjpf $tarball $package
      rm -rf $package
   done
   cd $root

   echo "Building root..."
   BuildRoot "Output/ROLayer" "Archives/Packages" /Programs/BuildLiveCD/Current/Data/Packages-List-* || exit 1

   # Add few items to rolayer
   mkdir -p Output/ROLayer/Files
   cp -ar LocalCVS/files/* Output/ROLayer/Files
   cp -ar External/Files-Fonts/* Output/ROLayer/Files
   mkdir -p Output/ROLayer/Files/Documentation
   cp -ar External/Linux-Kernel/* Output/ROLayer

   # Clean CVS files from ROLayer
   echo "Removing CVS files..."
   find Output/ROLayer/Files -type d -name CVS | xargs rm -rf
   echo "=> ROLayer stage done"
fi

mkdir -p Output/ISO

if [ "$start_at" -le "$STAGE_SQUASHFS" ] && [ "$stop_at" -ge "$STAGE_SQUASHFS" ]
then
   echo "=> SquashFS stage started"

   unionfs_dirs=`echo "${build_layers[@]}" | tr " " ":"`
   mkdir -p Output/Environment
   echo "Unionfs mounting layers."
   tmp_mp=`mktemp -d /tmp/finalize_layer-XXXXX`
   unionfs_dirs="dirs=${tmp_mp}=rw:${unionfs_dirs}"
   echo mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment
   mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment || { echo Error mounting Output/Environment; exit 1; }

   mkdir -p Output/Checksums
   
   function ld_so_cache_changed() {
      if grep -q "Output/Environment/Programs/Glibc/Settings/ld.so.cache" /tmp/newer.txt
      then
         diff Output/ld.so.cache.sum Output/ld.so.cache.sum.old &> /dev/null
         if [ $? -ne 0 ]
         then
            cp Output/ld.so.cache.sum Output/ld.so.cache.sum.old
            return 0
         fi
      fi
      return 1
   }

   function mksquashfs_on_demand() {
      out="$1"
      shift
      bn=`basename "$out"`
      # sumsfile=Output/Checksums/$bn.sums
      echo "Checking if $bn needs updating..."
      find "$@" -newer "$out" 2> /dev/null > /tmp/newer.txt
      #diffs=`cat /tmp/newer.txt | grep -v "Output/Environment/Programs/Glibc/Settings/ld.so.cache" | wc -l`
      #FIXME: Assuming Glibc is not being changed
      diffs=`cat /tmp/newer.txt | grep -v "Output/Environment/Programs/Glibc" | wc -l`
      ld_so_cache_changed
      if [ $diffs -ne 0 ]
      then
         echo ==========
         echo Changes:
         echo ----------
         cat /tmp/newer.txt
         echo ==========
      fi
      if [ ! -e "$out" ] || [ $diffs -gt 0 ] || ld_so_cache_changed
      #find "$@" | grep -v Devices | xargs -n 100 md5sum > $sumsfile.new 2> /dev/null
      #if ! diff -q $sumsfile $sumsfile.new
      then
         echo "Creating squashfs compressed file $bn..."
         # mv $sumsfile.new $sumsfile
         nice -20 mksquashfs "$@" "$out" -noappend -keep-as-directory
      else
         echo "Mksquashfs not needed for $bn."
      fi
      rm /tmp/newer.txt
   }

   # Final actions on Environment
   chroot Output/Environment /bin/ldconfig
   md5sum Output/Environment/Programs/Glibc/Settings/ld.so.cache > Output/ld.so.cache.sum

   # compress the uncompressed files into squashfs files
   time mksquashfs_on_demand Output/ISO/GoboLinux-files.squashfs Output/Environment/Files
   for i in /Programs/BuildLiveCD/Current/Data/Packages-List-*; do 
      time mksquashfs_on_demand Output/ISO/`basename $i`.squashfs `cat $i | cut -f 1 -d ' ' | sort -u | while read i; do echo Output/Environment/Programs/$i; done`
   done
   time mksquashfs_on_demand Output/ISO/GoboLinux-rest.squashfs `ls -d Output/Environment/* | grep -v Files | grep -v Programs | grep -v Users`

   umount Output/Environment
   rm -rf $tmp_mp
   echo "=> SquashFS stage done"
fi

cp -ra External/CD-Bootloader/$arch/. Output/ISO/

if [ "$start_at" -le "$STAGE_INITRD" ] && [ "$stop_at" -ge "$STAGE_INITRD" ]
then
   echo "=> InitRD stage started"
   #Rebuild initrd
   initrd_dir=Output/InitRD

   cd Archives/InitRD/
   for package in InitRDScripts
   do
      echo "Packing $package CVS snapshot..."
      tarball=$package--$today--$arch.tar.bz2
      rm -rf $package
      mkdir -p $package/$today
      cp -a $localcvs/tools/$package/* $package/$today
      cd $package/$today
      [ -e Makefile ] && make > /dev/null
      find -type d -name CVS | xargs rm -rf 
      cd ..
      ln -nfs $today Current
      cd ..
   
      rm -f $tarball
      tar cjpf $tarball $package
      rm -rf $package
   done
   cd $root
   
   MakeInitRDTree
   cp External/Linux-Kernel/System/Kernel/Boot/kernel-$kernel_version Output/ISO/isolinux/kernel
   mkfs.cramfs $initrd_dir Output/ISO/isolinux/initrd
   echo "=> InitRD stage done"
fi

if [ "$start_at" -le "$STAGE_ISO" ] && [ "$stop_at" -ge "$STAGE_ISO" ]
then
   echo "=> ISO stage started"
   # having the squashfs file, you can prepare the bootable iso
   iso_name="Output/GoboLinux-NoVersion.iso"
   time nice -20 mkisofs -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table Output/ISO  > $iso_name
   echo "=> ISO stage done"
fi
