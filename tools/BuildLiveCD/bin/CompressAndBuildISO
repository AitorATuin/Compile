#!/bin/sh

. Master.conf

if [ "$UID" != "0" ]
then
    echo "Running as superuser."
    exec sudo -u "#0" $0 $*
fi

start_at=`echo $1| tr 'A-Z' 'a-z'`

mkdir -p output
mkdir -p output/ISO
if [ "$start_at" = "layer1" ] || ! [ -d "output/Layer1" ]
then
    mkdir -p output/Layer1
    LiveCD_work/Scripts/BuildRoot "output/Layer1" "Packages" "Packages/package.list"
    [ "$?" = "0" ] || exit 1

    # Add few items to layer1
    mkdir -p output/Layer1/Files
    cp -ar Ext_work/Gobo-Files output/Layer1/Files
    cp -ar Ext_work/Files-Fonts output/Layer1/Files
    mkdir -p output/Layer1/Files/Documentation
    cp -ar Ext_work/Linux-HOWTOs output/Layer1/Files/Documentation
    cp -ar Ext_work/Linux-Kernel/. output/Layer1

    # Clean CVS files from Layer1
    find output/Layer1 -name CVS |xargs rm -rf
    start_at="squashfs"
fi

if [ "$start_at" = "squashfs" ] || ! [ -f "output/ISO/GoboLinux.squashfs" ]
then
    # Freshen build_chroots
    echo "Freshen"
    unionfs_dirs=""
    for layer in "${build_layers[@]}"
    do

	# Don't touch touch Layer1
	[ "$layer" = "${build_layers[0]}" ] && continue

        unionfs_dirs="$unionfs_dirs:${layer}=ro"
        layer_bn=`basename $layer`
	echo "   output/$layer_bn"
	mkdir -p output/$layer_bn
	cp -ar $layer/. output/$layer_bn
	# Clean layer of CVS
	find output/$layer_bn -name CVS |xargs rm -rf
    done

    mkdir -p output/Environment
    echo "Unionfs mounting layers."
    tmp_mp=`mktemp -d /tmp/finalize_layer-XXXXX`
    unionfs_dirs="dirs=${tmp_mp}=rw:${build_layers[0]]}=ro${unionfs_dirs}"
    echo mount -t unionfs -o ${unionfs_dirs} none output/Environment
    mount -t unionfs -o ${unionfs_dirs} none output/Environment

    # Final actions on Environment
    chroot output/Environment /bin/ldconfig
    # compress the uncompressed files into a squashfs file
    echo "Creating squashfs compressed file..."
    # rewrite with unionfs and single mksquashfs
    time nice -20 mksquashfs output/Environment/* output/ISO/GoboLinux.squashfs -noappend
    umount output/Environment
    rm -rf $tmp_mp
    start_at="initrd"
fi

cp -ra LiveCD_work/ISO_Base/$arch/. output/ISO

if [ "$start_at" = "initrd" ] || ! [ -f "output/ISO/isolinux/initrd.gz" ]
then
    #Rebuild initrd
    echo "Building initrd.gz"
    rm -rf "output/InitRD"
    mkdir -p "output/InitRD"
    cp -ra Ext_work/InitRD/. output/InitRD
    cp Ext_work/Linux-Kernel/System/Kernel/Modules/2.6.15.2-Gobo/kernel/drivers/usb/storage/usb-storage.ko output/InitRD/System/Kernel/Modules/
    cp Ext_work/Linux-Kernel/System/Kernel/Boot/kernel-2.6.15.2-Gobo output/ISO/isolinux/kernel
    mkfs.cramfs output/InitRD output/ISO/isolinux/initrd
fi

if [ "$start_at" = "" ]
then
    echo "Starting at last stage (iso)."
    echo "    if you want earlier stage specify one of:"
    echo "    layer1, squashfs, initrd, iso"
    echo ""
    echo "==================================================================="
    echo ""

fi

# having the squashfs file, you can prepare the bootable iso
echo "Building ISO..."
iso_name="output/GoboLinux-NoVersion.iso"
time nice -20 mkisofs -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table output/ISO  > $iso_name
