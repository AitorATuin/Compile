#!/bin/sh

kernel_version="2.6.16.2-Gobo"

if [ "$1" = "--help" ]
then
   echo "$0 [<stage>]"
   echo "   where stage can be: layer1, squashfs, initrd, iso"
   echo " "
   echo "   for more information, see http://gobolinux.org/?page=livecd"
   echo " "
   exit 0
fi

if ! which mksquashfs &> /dev/null
then
   echo "You need to install SquashFS-Tools."
   exit 1
fi

for conf in ./Master.conf /System/Settings/BuildLiveCD/Master.conf fail
do
   if [ "$conf" = "fail" ]
   then
      echo "Could not find Master.conf."
      exit 1
   elif [ -e $conf ]
   then
      source $conf
      break
   fi
done

if [ "$UID" != "0" ]
then
    echo "Running as superuser."
    exec sudo -u "#0" $0 $*
fi

start_at=`echo $1| tr 'A-Z' 'a-z'`

mkdir -p Output/ISO
if [ "$start_at" = "layer1" ] || ! [ -d "Output/Layer1" ]
then
    BuildRoot "Output/Layer1" "Archives/Packages" "Archives/Packages/package.list"
    [ "$?" = "0" ] || exit 1

    # Add few items to layer1
    mkdir -p Output/Layer1/Files
    cp -ar External/Gobo-Files/* Output/Layer1/Files
    cp -ar External/Files-Fonts/* Output/Layer1/Files
    mkdir -p Output/Layer1/Files/Documentation
    cp -ar External/Linux-HOWTOs Output/Layer1/Files/Documentation
    cp -ar External/Linux-Kernel/* Output/Layer1

    # Clean CVS files from Layer1
    find Output/Layer1 -name CVS | grep -v Programs/CVS | xargs rm -rf
    start_at="squashfs"
fi

if [ "$start_at" = "squashfs" ] || ! [ -f "Output/ISO/GoboLinux-files.squashfs" ]
then
    # Freshen build_chroots
    echo "Freshen"

    unionfs_dirs=`echo "${build_layers[@]}" | tr " " ":"`

    mkdir -p Output/Environment
    echo "Unionfs mounting layers."
    tmp_mp=`mktemp -d /tmp/finalize_layer-XXXXX`
    unionfs_dirs="dirs=${tmp_mp}=rw:${unionfs_dirs}"
    echo mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment
    mount -t unionfs -o ${unionfs_dirs} $tmp_mp Output/Environment

    mkdir -p Output/Checksums
    
    function ld_so_cache_changed() {
       if grep -q "Output/Environment/Programs/Glibc/Settings/ld.so.cache" /tmp/newer.txt
       then
          diff Output/ld.so.cache.sum Output/ld.so.cache.sum.old &> /dev/null
          if [ $? -ne 0 ]
          then
             cp Output/ld.so.cache.sum Output/ld.so.cache.sum.old
             return 0
          fi
       fi
       return 1
    }
    
    function mksquashfs_on_demand() {
       out="$1"
       shift
       bn=`basename "$out"`
       # sumsfile=Output/Checksums/$bn.sums
       echo "Checking if $bn needs updating..."
       find "$@" -type f -newer "$out" 2> /dev/null > /tmp/newer.txt
       diffs=`cat /tmp/newer.txt | grep -v "Output/Environment/Programs/Glibc/Settings/ld.so.cache" | wc -l`
       ld_so_cache_changed
	   if [ $diffs -ne 0 ]
	   then
          echo ==========
          echo Changes:
          echo ----------
          cat /tmp/newer.txt
          echo ==========
	   fi
       if [ ! -e "$out" ] || [ $diffs -gt 0 ] || ld_so_cache_changed
       #find "$@" | grep -v Devices | xargs -n 100 md5sum > $sumsfile.new 2> /dev/null
       #if ! diff -q $sumsfile $sumsfile.new
       then
          echo "Creating squashfs compressed file $bn..."
          # mv $sumsfile.new $sumsfile
          nice -20 mksquashfs "$@" "$out" -noappend
       else
          echo "Mksquashfs not needed for $bn."
       fi
       rm /tmp/newer.txt
    }

    # Final actions on Environment
    chroot Output/Environment /bin/ldconfig
    md5sum Output/Environment/Programs/Glibc/Settings/ld.so.cache > Output/ld.so.cache.sum
    # compress the uncompressed files into a squashfs file

    time mksquashfs_on_demand Output/ISO/GoboLinux-files.squashfs Output/Environment/Files
    time mksquashfs_on_demand Output/ISO/GoboLinux-programs-a-e.squashfs Output/Environment/Programs/[A-E]*
    time mksquashfs_on_demand Output/ISO/GoboLinux-programs-f-j.squashfs Output/Environment/Programs/[F-J]*
    time mksquashfs_on_demand Output/ISO/GoboLinux-programs-k-o.squashfs Output/Environment/Programs/[K-O]*
    time mksquashfs_on_demand Output/ISO/GoboLinux-programs-p-t.squashfs Output/Environment/Programs/[P-T]*
    time mksquashfs_on_demand Output/ISO/GoboLinux-programs-u-z.squashfs Output/Environment/Programs/[U-Z]*
    time mksquashfs_on_demand Output/ISO/GoboLinux-rest.squashfs `ls -d Output/Environment/* | grep -v Files | grep -v Programs`

    umount Output/Environment
    rm -rf $tmp_mp
    start_at="initrd"
fi

cp -ra External/CD-Bootloader/$arch/. Output/ISO

if [ "$start_at" = "initrd" ] || ! [ -f "Output/ISO/isolinux/initrd.gz" ]
then
    #Rebuild initrd
    echo "Building initrd.gz"
    initrd_dir=Output/InitRD
    MakeInitRDTree
    cp External/Linux-Kernel/System/Kernel/Modules/$kernel_version/kernel/drivers/usb/storage/usb-storage.ko $initrd_dir/System/Kernel/Modules/
    cp External/Linux-Kernel/System/Kernel/Boot/kernel-$kernel_version Output/ISO/isolinux/kernel
    mkfs.cramfs $initrd_dir Output/ISO/isolinux/initrd
fi

if [ "$start_at" = "" ]
then
    echo "Starting at last stage (iso)."
    echo "    if you want earlier stage specify one of:"
    echo "    layer1, squashfs, initrd, iso"
    echo ""
    echo "==================================================================="
    echo ""

fi

# having the squashfs file, you can prepare the bootable iso
echo "Building ISO..."
iso_name="Output/GoboLinux-NoVersion.iso"
time nice -20 mkisofs -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table Output/ISO  > $iso_name
