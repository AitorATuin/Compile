FAQ (Häufig gestellte Fragen)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

F: Was zum Geier ist eigentlich GoboLinux?
------------------------------------------

A: GoboLinux ist eine Linux-Distribution, welche mit der klassischen Linux-
Verzeichnishierarchie bricht. Im Grunde bedeutet das, dass es keine
Verzeichnisse wie z.B. /usr und /etc gibt. Der Hauptgedanke der alternativen
Hierarchie ist es, alle Dateien, die zu einer Applikation gehören in einem
eigenen Unterbaumverzeichnis zu speichern. Aus diesem Grunde bestehen
Verzeichnisse wie z.B. /Programs/GCC/2.95.3/lib.

Um es dem System zu ermöglichen, diese Dateien zu finden werden sie logisch in
Verzeichnissen wie z.B. /System/Links/Executables gruppiert. Diese wiederum,
und das haben sie bestimmt schon erraten, enthalten symbolische Verknüpfungen
zu allen ausführbaren Dateien innerhalb der Hierarchie des Programms.

Um die Kompatibilität zu traditionellen Unix/Linux Programmen zu wahren gibt
es symbolische Verknüpfungen, die den Unix-Verzeichnisbaum nachahmen, wie z.B.
"/usr/bin -> /System/Links/Executables" und "/sbin ->
/System/Links/Executables" (dieses Beispiel zeigt, dass willkürliche
Unterscheidungen zwischen Dateien derselben Kategorie auch beseitigt wurden).

F: Ist es eine Distribution für Neulinge (Newbies)?
---------------------------------------------------

A: Nein, das ist es nicht. Es ist auf Benutzer ausgerichtet, die es vorziehen,
Applikationen aus den originalen Quellpaketen zu installieren. Das ist auch
der Hauptgrund, warum jede Applikation ihr eigenes Verzeichnis erhält: Sie
können es aus dem Quellcode dorthin installieren und mit einem simplen
"rm -rf" wieder löschen. Sie merken schon, GoboLinux richtet sich an den
erfahrenen Benutzer, der nichts dem Zufall überlassen will. Unsere Skripte
automatisieren viele Prozeduren beinahe vollständig, aber sie "entscheiden"
nicht für den Benutzer - und wenn sie es doch einmal müssen, dann fragen sie
zuerst.

Die Sammlung von Binärpaketen wurde geschaffen, um zu verhindern, dass sich
Benutzer doppelt Mühe machen. Das Projekt "Compile" wurde ins Leben gerufen,
um Regeln zum Kompilieren der Original-Quellpakete der Programme ("Recipes")
zu verwalten. Wir möchten keinen "Paketstandard" wie RPM einführen. Wir sind
der Meinung dass "Pakete" nicht wirklich nötig sind, sofern das original
.tar.gz-Archiv geeignet ist. Wenn ein Programm z.B. GNU AutoTools (autoconf,
automake...) benutzt, benötigen sie kein GoboLinux-Paket um ihr System
konsistent zu halten.

Trotzdem konnte GoboLinux durch den logischeren Verzeichnisbaum, einer
umfassenden Paketsammlung und graphischen Frontends zu den Skripten zu einer
anfängertauglichen Distribution heranwachsen.

F: Wie ist der aktuelle Stand?
------------------------------

A: Diese Frage lässt sich in zwei Fragen spalten, zum einen nach dem Status
der Tools von GoboLinux und zum anderen nach der Verfügbarkeit von Paketen.

GoboLinux verlässt sich auf eine Reihe von Tools, die viele Aufgaben automa-
tisieren. Dazu gehören das Erstellen, die Installation und das Entfernen von
Paketen und (wohl das Wichtigste) die Überwachung und Aktualisierung von
symbolischen Verknüpfungen, welche das System stabil halten. Diese Tools sind
größtenteils stabil.

Ein anderes wichtiges Thema bei der Nutzung einer Distribution ist die
Verfügbarkeit von Paketen, das heißt Software, die man im Binärformat
herunterladen und einfach installieren kann. Was dies betrifft, ist GoboLinux
anderen etablierten Distributionen noch hinterher - aber es holt sie stetig
ein, insbesondere wenn man die ständig von den Benutzern erstellten und
beigetragenen "Recipes" berücksichtigt.

F: Welche Ziele verfolgt ihr mit GoboLinux?
-------------------------------------------

A: Unser allererstes Ziel ist es, ein System zu besitzen an dem wir Freude
haben, wenn wir es benutzen. Ein System, das nicht durch irgendeine dumme
Package-Managing-Software zerstört wird, weil diese versucht den Rechner für
uns zu administrieren. Die meisten Linux-Distributionen versuchen dem Anfänger
das Leben zu erleichtern, erschweren es aber zugleich dem Fortgeschrittenen
umso mehr. Wir behaupten nicht, dass GoboLinux einfacher wäre - aber es ist
"sinnvoller". Wie dem auch sei, Menschen, die es nutzen bescheinigen eine
leichtere Administration - was es auch dem Benutzer erleichtert, sein System
besser zu verstehen (sofern er das denn möchte).

Ein weiteres Ziel ist es, binäre Kompatibilität zwischen allen Benutzern zu
erreichen, so dass wir daheim Dinge kompilieren und mit allen anderen Nutzern
tauschen können, ohne jedesmal die gleiche .tar.gz herunterzuladen und die
Zeit mit dem Kompilieren zu verschwenden (wie wir es bisher gewohnt waren).

Im Scherz sagen wir, dass GoboLinux "ihre letzte Linux-Distribution" sein
wird, denn wir empfinden es als einfacher, das System stets aktuell zu halten
als mit regulären Distributionen. Manche Benutzer installieren ihr System über
Jahre hinweg niemals neu.

Die Weltherrschaft ist nur sekundäres Ziel.

F: Wie hat GoboLinux angefangen?
--------------------------------

A: GoboLinux begann mit Hisham, dem es darum ging, Programme sauber innerhalb
eines normalen Benutzerkontos in der Universität zu installieren. Dann
kopierte er das System auf seinen eigenen Computer, wo es mit dem
gewöhnlichen Unix-Verzeichnisbaum koexistierte - er taufte es LodeLinux, nach
seinem üblichen Online-Nickname.

Eines Tages, nach "Dem Großen Dateisystem Crash", war Hisham gezwungen, sein
ganzes System komplett neu zu installieren und dachte darüber nach, im neuen
System nur den alternativen Verzeichnisbaum zu benuzten (der im zuvor
installierten System bereits 80% der installierten Software ausmachte). Detsch
dachte ebenfalls an eine Neuinstallation seines Linux-Systems, und so trafen
sie sich eines Wochenendes in seinem Haus und vollzogen die gesamte
Linux-From-Scratch-Prozedur. Sie veränderten es so, dass das neue System die
alternative Baumstruktur nutzte. Sie nannten es GoboLinux nach Gobo, der ihr
Finanzberater, geistlicher Mentor sowie Personal Trainer ist.

F: Wer entwickelt GoboLinux?
----------------------------

A: GoboLinux wurde zuerst von Hisham Muhammad und Andre Detsch entwickelt, als
Nachfolger von Hishams vorherigem Experiment, LodeLinux. Seit damals erfreut
es sich einer stetig wachsenden Benutzerzahl, die als Anhänger des Glaubes an
Freie Software mit eigenen Beiträgen das Projekt voranbringen. Guilherme
Bedin, unser stolzer GoboLinux-Benutzer #3, begann das ganze Ding auf eine CD
zu packen. Je mehr Zeit vergeht, desto mehr Benutzer treten dem Projekt bei.
Lucas Correia Villa Real ist unser Kernelhacker. Er erhält wichtige und
tatkräftige Hilfe von Felipe Damasio. Seit der Version 006 tragen Menschen aus
aller Welt zu GoboLinux bei, zu viele, um sie hier alle namentlich zu nennen.

F: Gibt es einen Verlust an Performance durch die Nutzung von symbolischen
--------------------------------------------------------------------------
Verknüpfungen - ist GoboLinux also eine schlechte Wahl für z.B. Server mit
--------------------------------------------------------------------------
hohem Datenaufkommen?
---------------------

Die kurze Antwort: Ja, es gibt zumindest einen theoretischen
Performanceverlust und nein, wir haben es nicht gemessen (warum wir
theoretisch schreiben kann man in "die lange Antwort" nachlesen).

Die lange Antwort: Der wirkliche Einfluss durch den Gebrauch von symbolischen
Verknüpfungen ist wahrscheinlich geringer, als man denkt. In einer normalen
Linux-Distribution wird auf Bibliotheken bereits durch symbolische
Verknüpfungen zugegriffen. Bei GoboLinux zeigen alle Verknüpfungen direkt auf
die eigentliche Datei, also besteht lediglich eine Ebene zwischen dem Link und
der Bibliothek.

Ein Beispiel: nehmen wir libc.so.6. Die Datei befindet sich in /lib, welches
ein Link zu /System/Links/Libraries darstellt. Die eigentliche Datei aber
befindet sich in /Programs/Glibc/Current, wobei Current auch ein Link nach
2.2.3 ist. Innerhalb des Glibc lib Verzeichnis liegt dann die libc.so.6,
die eigentlich auch nur ein Link nach libc-2.2.3.so ist. Das sind eine Menge
Links, nicht wahr? Wie dem auch sei, auf Bibliotheken wird wie folgt
zugegriffen: das Verzeichnis /System/Links/Libraries (das kein Link ist) ist
das einzige, welches in der ldconfig Konfiguration (und im LD_LIBRARY_PATH)
gespeichert ist. Dort zeigt libc.so.6 direkt nach
/Programs/Glibc/2.2.3/lib/libc-2.2.3.so (kein einziger Link im kompletten
Pfad). Also haben wir exakt eine Ebene, die indirekt verläuft, genau wie auch
in einer gewöhnlichen Distribution. Sie *sehen* vielleicht viele Links, aber
die meisten vereinfachen das Systemmanagement.

Applikationen werden auch mit dem Parameter "--prefix" kompiliert, der auf ihr
"home" in /Programs/App/version zeigt. Also muss ein Programm, wenn es nach
Dateien sucht, keinem Link folgen. Um ausführbare Dateien zu erreichen bedarf
es zwar der Verfolgung von Links, es müssen aber im Unterschied zu anderen
Distributionen keine PATH-Angaben durchsucht werden (wir denken, dass die
Prozeduren der Baumstruktur des ReiserFS besser optimiert sind als das
Auffinden in $PATH durch die Shell. Natürlich gibt es immer den Hash der
Shell, aber es gibt auch immer den Cache des Dateisystems).

F: Was verbirgt sich hinter /Depot und /Files?
----------------------------------------------

A: /Depot ist ein "freier Bereich" zum Speichern ihrer Dokumente, z.B.
Videodateien, heruntergeladene Dateien etc. Man könnte es als eine Art
"Gemeinschaftsbereich" betrachten, ein "home für alle Benutzer" (einige
UNIX-Systeme haben ein /pub-Verzeichnis mit gleichem Sinn). Als System
ignoriert GoboLinux den Inhalt von /Depot. Es existiert nur, um Benutzer zu
ermutigen, zufällige Dateien in einem einzigen Platz zu speichern und damit
das übrige System sauber zu halten.

/Files auf der anderen Seite ist ein standardmäßiges GoboLinux-Verzeichnis.
Darin liegen Verzeichnisse für Fonts, Plugins und solche Dateien, die von
Applikationen gemeinsam genutzt werden aber nicht unbedingt Teil dieser sind.

F: Warum benutzt ihr GoboHide? Können nicht alle Programm so modifiziert
-----------------------------------------------------------------------
werden, dass sie in der GoboLinux-Hierarchie laufen?
-----------------------------------------------------

A: Wir überreden sie so oft es nur geht, den GoboLinux-Verzeichnisbaum
zu benutzen, wenn es Optionen beim Kompilieren gibt. Leider gibt es auch
viele Programme, die fest in den Quellcode integrierte Pfadangaben besitzen.
Letztendlich kann jede freie Software so gepatcht werden, dass sie läuft, aber
wir sind uns nicht sicher, ob wir genug Leute sind um sich einer solchen
Aufgabe anzunehmen. Es würde zumindest ein großes Problem darstellen, und wir
ziehen es im Allgemeinen vor Patches in der Anwendung zu reduzieren (übrigens
sind die Patches die wir normalerweise verwenden solche, wie zum Kompilieren
von GCC3 und Sicherheitspatches der Basispakete von Linux From Scratch).
Zumindest sind /bin, /lib und /sbin sehr kritisch. Wir haben Tests in einer
chroot-Umgebung durchgeführt und es ist lustig zu beobachten, welch
eigenartige Dinge geschehen, wenn diese Verzeichnisse fehlen.

F: Wer ist Gobo?
----------------

A: Wenn sie es wirklich, wirklich, wirklich wissen wollen, sehen sie sich die
Website http://www.gobolinux.org/cartoon an. Sie wurden gewarnt!

..............................................................................
zuerst ins Deutsche übersetzt von Florian Bruch
überarbeitet und aktualisiert von Volker Wieban 2005-03