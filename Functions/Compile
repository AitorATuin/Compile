#!/bin/bash

Import File

##################################################
# Setting up variables
##################################################

if [ "$compileRecipeDir" ]
then
   compileRecipeDirs=("$compileRecipeDir" "${compileRecipeDirs[@]}")
fi

if [ -z "$compileRecipeDir" ]
then
   compileRecipeDir="${compileRecipeDirs[0]}"
fi

compileSupportedArchitectures=("i686" "ppc" "arm" "sh4")

##################################################
# Helper functions
##################################################

function Check_Dir_Variable() {
   var="$1"
   eval [ "\"\${${var}}\"" ] || Die "Variable \\\$$var is not set. Please update your Compile.conf."
   eval Assert_Dir "\"\${${var}}\""
}

function Assert_Dir() {
   local dir=$1
   if ! Is_Directory "$dir"
   then
      mkdir -p "$dir" || \
      $sudo mkdir -p "$dir"
      if [ "$?" != "0" ]
      then
         Die "Unable to create $dir"
      fi
   fi
}

# Return status:
# 0 - Files were verified and are okay.
# 1 - Files are corrupted: must delete.
# 2 - Files look incomplete or cannot be verified:
#     may delete or try to continue download.
# 3 - Files are missing.
function Verify_Files() {
   local myfiles=($1)
   local sizes=($2)
   local md5s=($3)
   local i=0
   for i in $(seq 0 $[${#myfiles[@]}-1])
   do
      file="$compileArchivesDir/${myfiles[i]}"
      file_size="${sizes[i]}"
      file_md5="${md5s[i]}"
      if [ -f "$file" ]
      then
         siz=$(Get_Size "$file")
         md5=$(Get_MD5 "$file")
         if [ -n "$file_size" ] && [ "$file_size" != "$siz" ]
         then
            Log_Terse "Warning: $file is either not complete or corrupted."
            return 2
         elif [ -n "$file_size" ]
         then
            if [ -z "$file_md5" ]
            then
               Log_Normal "Warning: no MD5 checksum."
               Log_Normal "Assuming $file is complete based only on size."
            elif [ "$file_md5" = "$md5" ]
            then
               Log_Verbose "$file is complete and matches MD5 checksum."
            else
               Log_Error "According to MD5 checksum, $file is corrupted."
               return 1
            fi
         else
            if [ -z "$file_md5" ]
            then
               Log_Terse "Warning: no file size or MD5 checksum. $file cannot be verified"
               return 2
            elif [ "$file_md5" = "$md5" ]
            then
               Log_Normal "Warning: file size could not be verified but $file matches MD5 checksum."
            else
               Log_Error "According to MD5 checksum, $file is corrupted."
               return 1
            fi
         fi
      else
         return 3
      fi
   done
   return 0
}

function foreach_if_array_set() {
   local array=$1
   local cmd=$2
   eval "
      if [ \"\${$array[*]}\" ]
      then
         for item in \"\${$array[@]}\"
         do
            $cmd
         done
      fi
   "
}

function merge_array() {
   local array=$1
   foreach_if_array_set "$array" '
      echo -n "$item "
   '
}

function is_function_set() {
   [ "`type -t $1`" = "function" ]
}

### Future Scripts functions... ###

function Get_Size() {
   Parameters "$@" file
   ls -l "$file" | awk '{print $5}'
}

function Get_MD5() {
   Parameters "$@" file
   md5sum "$file" | awk '{print $1}'
}

function Run_Hook() {
   Parameters "$@" hookname
   hookscript=${hookname}.sh
   echo "#!/bin/bash" > ${hookscript}
   echo "source ScriptFunctions" >> ${hookscript}
   echo "Import GoboLinux" >> ${hookscript}
   echo "Import Log" >> ${hookscript}
   for v in ${variablestoexport[@]}
   do
      echo "export ${v}=$(eval echo \$${v})" >> ${hookscript}
   done
   echo "source ${recipe}" >> ${hookscript}
   [ "$archrecipe" ] && echo "source ${archrecipe}" >> ${hookscript}
   echo "$hookname" >> ${hookscript}
   $sudo_exec chmod a+x "${hookscript}"
   $sudo_exec /bin/bash -c "${hookscript}"
   rtn=$?
   rm -f ${hookscript}
   return ${rtn}
}
