#
# Cross-Compiler variables for ARM platform
# -----------------------------------------
#
# Based on uClibc toolchain generated by buildroot.
# See http://buildroot.uclibc.org for more information.
# 
# Written by Lucas Correia Villa Real <lucasvr@gobolinux.org>
#

source GoboPath


# kernel directory for the ARM platform
# -------------------------------------
export kernelDir="/Depot/Sources/Linux/SiriuStar/linux-2.6.11.11-lucasvr"
export kernelVersion="2.6.11.11"


#
# root directory where cross-compiled programs will get installed
# ---------------------------------------------------------------
export crossPrefixDir="/System/ARM"


# toolchain's root directory
# --------------------------
toolchainDir="/Depot/ToolChains/ARM-uClibc"


# path to stdio.h
# ---------------
sys_incdir="$toolchainDir/include"


# path to stdarg.h
# ----------------
gcc_incdir="$toolchainDir/lib/gcc/arm-linux-uclibc/3.4.4/include"


# path to iostream
# ----------------
cpp_incdir="$toolchainDir/include/c++/3.4.4"


# path to libgcc*.so
# ------------------
gcc_libdir="$toolchainDir/lib"


# path to libc.*
# --------------
libc_libdir="$toolchainDir/lib"


# replace ARCH by a valid output of uname -m for the target machine
# -----------------------------------------------------------------
export ARCH="armv5tel"
export TARGET="arm-pxa-linux"
export HOST="i686-pc-linux-gnu"


# optimization flags to be used by gcc (hint: info:/gcc/ARM Options)
# ------------------------------------------------------------------
export OPTIMIZATION_FLAGS="-mtune=xscale"


# cross-compiler prefix
# ---------------------
crossCompiler="arm-linux-uclibc-"


#
# usually there's no need to replace the data below
#
export LD="${crossCompiler}ld"
export CC="${crossCompiler}gcc"
export CPP="${crossCompiler}cpp"
export CXX="${crossCompiler}g++"
export CXXCPP="${crossCompiler}cpp"
export FC="${crossCompiler}f77"
export STRIP="${crossCompiler}strip"

export PATH="${toolchainDir}/bin:${PATH}"
export GCC_EXEC_PREFIX="${toolchainDir}/lib/gcc"
export PKG_CONFIG_PATH="${crossPrefixDir}/${goboLibraries}/pkgconfig"

export HOSTCC=`which gcc`
export HOSTCFLAGS="-I${goboHeaders} ${CFLAGS}"
export HOSTLDFLAGS="-L${goboLibraries} ${LDFLAGS}"
export NATIVE_CFLAGS="${HOSTCFLAGS}"
export NATIVE_LDFLAGS="${HOSTLDFLAGS}"

gcc_searchdir=`${CC} -print-search-dirs | sed -ne "s/install: \(.*\)/\1include/gp"`
export CFLAGS="-nostdinc -I${crossPrefixDir}/${goboHeaders} -I${sys_incdir} -I${gcc_incdir} -I${gcc_searchdir} ${OPTIMIZATION_FLAGS}"
export CXXFLAGS="${CFLAGS} -I${cpp_incdir}"

if [ -d "${crossPrefixDir}/${goboPrograms}/Glibc" ]
then
	export LDFLAGS="-L${crossPrefixDir}/${goboLibraries}"
else
	export LDFLAGS="-L${crossPrefixDir}/${goboLibraries} -L${toolchainDir}/lib -L${toolchainDir}/usr/lib"
fi

C_INCLUDE_PATH="${crossPrefixDir}${goboHeaders}"
C_INCLUDE_PATH="${C_INCLUDE_PATH}:${sys_incdir}"
C_INCLUDE_PATH="${C_INCLUDE_PATH}:${gcc_incdir}"
C_INCLUDE_PATH="${C_INCLUDE_PATH}:${gcc_searchdir}"
export C_INCLUDE_PATH

export CPLUS_INCLUDE_PATH="${C_INCLUDE_PATH}:${cpp_incdir}"
